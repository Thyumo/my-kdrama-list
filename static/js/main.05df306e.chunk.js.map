{"version":3,"sources":["realm/RealmApp.tsx","realm/RealmApolloProvider.tsx","components/LoginScreen.tsx","graphql-operations.ts","components/MainCard/SizedAvatar.tsx","components/DramaList/styled.tsx","Constants.ts","components/DramaList/DramaList.tsx","components/MainCard/styled.tsx","components/shared/StyledRating.tsx","components/MainCard/MainCard.tsx","components/FabGroup/styled.tsx","components/FabGroup/FabGroup.tsx","components/AddKDramaForm/styled.tsx","components/AddKDramaForm/AddKDramaForm.tsx","components/Ranking.tsx","utils.ts","components/Board.tsx","theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["app","Realm","id","RealmAppContext","React","undefined","RealmApp","children","appRef","currentUser","user","setUser","current","registerUser","email","password","a","emailPasswordAuth","context","logIn","credentials","emailPassword","logOut","Provider","value","useRealmApp","Error","RealmApolloProvider","createApolloClient","client","setClient","realmAppId","graphql_url","ApolloClient","link","HttpLink","uri","fetch","options","headers","refreshCustomData","authenticatedOptions","Authorization","accessToken","cache","InMemoryCache","LoginScreen","useState","setEmail","setPassword","error","setError","handleAuthenticationError","err","console","parts","message","split","reason","length","trimStart","status","reasonRegex","match","groups","parseAuthenticationError","prevErr","handleLogin","e","Container","Paper","elevation","style","paddingTop","paddingBottom","marginTop","display","flexDirection","alignItems","Typography","variant","onSubmit","preventDefault","TextField","margin","fullWidth","label","type","helperText","onChange","target","Button","color","GetAllKDramasDocument","gql","AddKDramaDocument","DeleteKDramaDocument","SetKDramaStatusDocument","SetEpisodesDocument","SetRatingDocument","UpdateKDramaDocument","RoundAvatar","styled","size","other","Avatar","height","props","width","SizedAvatar","image","onClick","src","fontSize","TitleTooltip","withStyles","tooltip","Tooltip","StyledInnerGrid","Grid","marginBottom","StyledOuterGrid","STATUSES","ACTIONS_TEXT","watching","completed","planned","STATUS_TEXT","DramaList","list","currentPage","setCurrentPage","setDisplayedKDrama","displayedDramas","slice","container","direction","justify","Fab","previousPage","map","kDrama","key","_id","title","handleClick","nextPage","StyledCard","Card","CardImage","objectFit","PaddedCardActions","CardActions","justifyContent","padding","StyledRating","iconFilled","blue","Rating","MainCard","setEpisodes","setStatus","setRating","rating","localRating","setLocalRating","useEffect","handleStart","ACTIONS","totalEpisodes","CardContent","alt","paddingLeft","fontWeight","marginRight","currentEpisode","RankingFab","position","right","bottom","backgroundColor","lightGreen","FilterGroupFab","green","FilterButtonGroup","ButtonGroup","FilterButton","borderColor","FabGroup","openAddForm","openRanking","setFilter","resetPage","openEditForm","showFilterList","setShowFilterList","showSettings","setShowSettings","orientation","StyledButtonGroup","alignSelf","AddKDramaForm","isOpen","closeModal","addKDrama","editMode","editedKDrama","updateKDrama","deleteKDrama","setTitle","setImage","setTotalEpisodes","setCurrentEpisode","errors","setErrors","inputData","handleClose","Dialog","open","onClose","isValid","newErrors","episodes","currEp","validate","DialogTitle","DialogContent","DialogContentText","autoFocus","Select","required","MenuItem","parseInt","SmallAvatar","Ranking","kDramas","Table","filter","sort","b","index","TableRow","TableCell","readOnly","replaceKDrama","newKDrama","updatedKDramas","i","StyledBackgroundGrid","background","borderRadius","Board","baseOptions","setKDramas","displayedKDrama","isFormOpen","setIsFormOpen","isEdit","setIsEdit","isRankingOpen","setIsRankingOpen","currentListPage","setCurrentListPage","statusFilter","setStatusFilter","filteredKDramas","useMemo","ApolloReactHooks","addKDramaMutation","useUpdateKDramaMutation","updateKDramaMutation","useDeleteKDramaMutation","deleteKDramaMutation","useSetKDramaStatusMutation","setKDramaStatusMutation","useSetEpisodesMutation","setEpisodesMutation","useSetRatingMutation","setRatingMutation","loading","useGetAllKDramasQuery","onCompleted","data","result","watchedKDrama","find","handleAdd","currentKDramas","variables","handleUpdate","updatedKDrama","handleDelete","newListPage","deleted","useCallback","counter","findIndex","renderCard","CircularProgress","isLoading","theme","createMuiTheme","palette","neutral","main","primary","secondary","cyan","App","ThemeProvider","RequireAuthentication","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.05df306e.chunk.js","sourcesContent":["import * as React from \"react\";\nimport * as Realm from \"realm-web\";\n\nconst REALM_APP_ID = \"mykdramalist-svqcx\"\nconst app = new Realm.App({ id: REALM_APP_ID });\n\nconst RealmAppContext = React.createContext<IRealmApp | void>(undefined);\n\ninterface IRealmApp {\n  id: string;\n  user: Realm.User | null;\n  logIn: (email: string, password: string) => Promise<void>;\n  logOut: () => Promise<void>;\n  registerUser(email: string, password: string): Promise<void>;\n}\n\nconst RealmApp: React.FC = ({ children }) => {\n  // Keep track of the current user in local state\n  const appRef = React.useRef(app);\n  const [user, setUser] = React.useState(app.currentUser);\n  React.useEffect(() => {\n    setUser(app.currentUser);\n  }, [appRef.current.currentUser]);\n  \n  // Let new users register an account\n  const registerUser = async (email: string, password: string) => {\n    return await app.emailPasswordAuth.registerUser(email, password);\n  }\n  \n  // Let registered users log in\n  const logIn = async (email: string, password: string) => {\n    const credentials = Realm.Credentials.emailPassword(email, password);\n    await app.logIn(credentials);\n    setUser(app.currentUser);\n  }\n  \n  // Let logged in users log out\n  const logOut = async () => {\n    await app.currentUser?.logOut();\n    setUser(app.currentUser);\n  }\n  \n  // Provide the current user and authentication methods to the wrapped tree\n  const context: IRealmApp = {\n    id: REALM_APP_ID,\n    user,\n    logIn,\n    logOut,\n    registerUser,\n  };\n  return (\n    <RealmAppContext.Provider value={context}>\n      {children}\n    </RealmAppContext.Provider>\n  );\n};\nexport default RealmApp;\n\nexport const useRealmApp = (): IRealmApp => {\n  const app = React.useContext(RealmAppContext);\n  if (!app) {\n    throw new Error(\"You must call useRealmApp() inside of a <RealmApp />.\");\n  }\n  return app;\n};","import * as React from \"react\";\nimport * as Realm from \"realm-web\";\nimport { useRealmApp } from \"./RealmApp\";\n\n// Apollo\nimport {\n  ApolloProvider,\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport { NormalizedCacheObject } from \"@apollo/client/cache\";\n\nconst RealmApolloProvider: React.FC = ({ children }) => {\n  const { id, user } = useRealmApp();\n  const [client, setClient] = React.useState(\n    createApolloClient(id, user as Realm.User)\n  );\n  React.useEffect(() => {\n    setClient(createApolloClient(id, user as Realm.User));\n  }, [id, user]);\n\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\nexport default RealmApolloProvider;\n\n// TODO: Implement createApolloClient()\nfunction createApolloClient(\n  realmAppId: string,\n  user: Realm.User\n): ApolloClient<NormalizedCacheObject> {\n  const graphql_url = `https://realm.mongodb.com/api/client/v2.0/app/${realmAppId}/graphql`;\n  \n  const client = new ApolloClient({\n    link: new HttpLink({\n      uri: graphql_url,\n      fetch: async (uri: RequestInfo, options: RequestInit) => {\n        if (!options.headers) {\n          options.headers = {} as Record<string, string>;\n        }\n        // Refreshing custom data also ensures a valid access token\n        await user.refreshCustomData();\n        const authenticatedOptions: RequestInit = {\n          ...options,\n          headers: {\n            ...options.headers,\n            Authorization: `Bearer ${user.accessToken}`\n          }\n        }\n        return fetch(uri, authenticatedOptions);\n      },\n    }),\n    cache: new InMemoryCache(),\n  });\n\n  return client\n}","import React, { useState } from \"react\";\nimport {\n  Container,\n  TextField,\n  Button,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nimport { useRealmApp } from \"../realm/RealmApp\";\n\nconst LoginScreen: React.FC = () => {\n  const app = useRealmApp();\n\n  // Keep track of form input state\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n\n  // Keep track of input validation/errors\n  const [error, setError] = React.useState<{\n    email?: string;\n    password?: string;\n  }>({});\n\n  function parseAuthenticationError(err: Error) {\n    const parts = err.message.split(\":\");\n    const reason = parts[parts.length - 1].trimStart();\n    if (!reason) return { status: \"\", message: \"\" };\n    const reasonRegex = /(?<message>.+)\\s\\(status (?<status>[0-9][0-9][0-9])/;\n    const match = reason.match(reasonRegex);\n    const { status, message } = match?.groups ?? {};\n    return { status, message };\n  }\n\n  function handleAuthenticationError(err: Error) {\n    console.error(err);\n    const { status, message } = parseAuthenticationError(err);\n    const errorType = message || status;\n    switch (errorType) {\n      case \"invalid username\":\n        setError((prevErr) => ({\n          ...prevErr,\n          email: \"Invalid email address.\",\n        }));\n        break;\n      case \"invalid username/password\":\n      case \"invalid password\":\n      case \"401\":\n        setError((err) => ({ ...err, password: \"Incorrect password.\" }));\n        break;\n      case \"name already in use\":\n      case \"409\":\n        setError((err) => ({ ...err, email: \"Email is already registered.\" }));\n        break;\n      case \"password must be between 6 and 128 characters\":\n      case \"400\":\n        setError((err) => ({\n          ...err,\n          password: \"Password must be between 6 and 128 characters.\",\n        }));\n        break;\n    }\n  }\n\n  const handleLogin = async () => {\n    setError((e) => ({ ...e, password: undefined }));\n    try {\n      return await app.logIn(email, password);\n    } catch (err) {\n      handleAuthenticationError(err);\n    }\n  };\n\n  return (\n    <Container>\n      <Paper\n        elevation={4}\n        style={{\n          paddingTop: \"70px\",\n          paddingBottom: \"70px\",\n          marginTop: \"200px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <Typography variant=\"h2\">My KDrama List</Typography>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            handleLogin();\n          }}\n        >\n          <TextField\n            style={{ margin: \"8px\", marginTop: \"38px\" }}\n            fullWidth\n            id=\"email\"\n            label=\"Email\"\n            type=\"email\"\n            value={email}\n            error={!!error.email}\n            helperText={error.email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n          <TextField\n            style={{ margin: \"8px\" }}\n            fullWidth\n            id=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            value={password}\n            error={!!error.password}\n            helperText={error.password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <Button\n            style={{ margin: \"8px\", marginTop: \"38px\" }}\n            fullWidth\n            variant=\"outlined\"\n            color=\"primary\"\n            type=\"submit\"\n          >\n            Log In\n          </Button>\n        </form>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default LoginScreen;\n","import * as Types from './types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/client';\n\nexport const GetAllKDramasDocument = gql`\n    query GetAllKDramas {\n  kDramas {\n    _id\n    title\n    image\n    status\n    totalEpisodes\n    currentEpisode\n    rating\n  }\n}\n    `;\n\n/**\n * __useGetAllKDramasQuery__\n *\n * To run a query within a React component, call `useGetAllKDramasQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllKDramasQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllKDramasQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllKDramasQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>) {\n        return ApolloReactHooks.useQuery<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>(GetAllKDramasDocument, baseOptions);\n      }\nexport function useGetAllKDramasLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>(GetAllKDramasDocument, baseOptions);\n        }\nexport type GetAllKDramasQueryHookResult = ReturnType<typeof useGetAllKDramasQuery>;\nexport type GetAllKDramasLazyQueryHookResult = ReturnType<typeof useGetAllKDramasLazyQuery>;\nexport type GetAllKDramasQueryResult = ApolloReactCommon.QueryResult<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>;\nexport const AddKDramaDocument = gql`\n    mutation AddKDrama($kDrama: KDramaInsertInput!) {\n  kDrama: insertOneKDrama(data: $kDrama) {\n    _id\n    title\n    image\n    status\n    totalEpisodes\n    currentEpisode\n    rating\n  }\n}\n    `;\nexport type AddKDramaMutationFn = ApolloReactCommon.MutationFunction<Types.AddKDramaMutation, Types.AddKDramaMutationVariables>;\n\n/**\n * __useAddKDramaMutation__\n *\n * To run a mutation, you first call `useAddKDramaMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddKDramaMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addKDramaMutation, { data, loading, error }] = useAddKDramaMutation({\n *   variables: {\n *      kDrama: // value for 'kDrama'\n *   },\n * });\n */\nexport function useAddKDramaMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.AddKDramaMutation, Types.AddKDramaMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.AddKDramaMutation, Types.AddKDramaMutationVariables>(AddKDramaDocument, baseOptions);\n      }\nexport type AddKDramaMutationHookResult = ReturnType<typeof useAddKDramaMutation>;\nexport type AddKDramaMutationResult = ApolloReactCommon.MutationResult<Types.AddKDramaMutation>;\nexport type AddKDramaMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.AddKDramaMutation, Types.AddKDramaMutationVariables>;\nexport const DeleteKDramaDocument = gql`\n    mutation DeleteKDrama($id: ObjectId!) {\n  kDrama: deleteOneKDrama(query: {_id: $id}) {\n    _id\n  }\n}\n    `;\nexport type DeleteKDramaMutationFn = ApolloReactCommon.MutationFunction<Types.DeleteKDramaMutation, Types.DeleteKDramaMutationVariables>;\n\n/**\n * __useDeleteKDramaMutation__\n *\n * To run a mutation, you first call `useDeleteKDramaMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteKDramaMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteKDramaMutation, { data, loading, error }] = useDeleteKDramaMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteKDramaMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.DeleteKDramaMutation, Types.DeleteKDramaMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.DeleteKDramaMutation, Types.DeleteKDramaMutationVariables>(DeleteKDramaDocument, baseOptions);\n      }\nexport type DeleteKDramaMutationHookResult = ReturnType<typeof useDeleteKDramaMutation>;\nexport type DeleteKDramaMutationResult = ApolloReactCommon.MutationResult<Types.DeleteKDramaMutation>;\nexport type DeleteKDramaMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.DeleteKDramaMutation, Types.DeleteKDramaMutationVariables>;\nexport const SetKDramaStatusDocument = gql`\n    mutation SetKDramaStatus($id: ObjectId!, $status: String!) {\n  kDrama: updateOneKDrama(query: {_id: $id}, set: {status: $status}) {\n    _id\n    title\n    image\n    status\n    totalEpisodes\n    currentEpisode\n    rating\n  }\n}\n    `;\nexport type SetKDramaStatusMutationFn = ApolloReactCommon.MutationFunction<Types.SetKDramaStatusMutation, Types.SetKDramaStatusMutationVariables>;\n\n/**\n * __useSetKDramaStatusMutation__\n *\n * To run a mutation, you first call `useSetKDramaStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetKDramaStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setKDramaStatusMutation, { data, loading, error }] = useSetKDramaStatusMutation({\n *   variables: {\n *      id: // value for 'id'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useSetKDramaStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.SetKDramaStatusMutation, Types.SetKDramaStatusMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.SetKDramaStatusMutation, Types.SetKDramaStatusMutationVariables>(SetKDramaStatusDocument, baseOptions);\n      }\nexport type SetKDramaStatusMutationHookResult = ReturnType<typeof useSetKDramaStatusMutation>;\nexport type SetKDramaStatusMutationResult = ApolloReactCommon.MutationResult<Types.SetKDramaStatusMutation>;\nexport type SetKDramaStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.SetKDramaStatusMutation, Types.SetKDramaStatusMutationVariables>;\nexport const StartKDramaDocument = gql`\n    mutation StartKDrama($id: ObjectId!) {\n  kDrama: updateOneKDrama(query: {_id: $id}, set: {status: \"watching\", currentEpisode: 1}) {\n    _id\n    title\n    image\n    status\n    totalEpisodes\n    currentEpisode\n    rating\n  }\n}\n    `;\nexport type StartKDramaMutationFn = ApolloReactCommon.MutationFunction<Types.StartKDramaMutation, Types.StartKDramaMutationVariables>;\n\n/**\n * __useStartKDramaMutation__\n *\n * To run a mutation, you first call `useStartKDramaMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useStartKDramaMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [startKDramaMutation, { data, loading, error }] = useStartKDramaMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useStartKDramaMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.StartKDramaMutation, Types.StartKDramaMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.StartKDramaMutation, Types.StartKDramaMutationVariables>(StartKDramaDocument, baseOptions);\n      }\nexport type StartKDramaMutationHookResult = ReturnType<typeof useStartKDramaMutation>;\nexport type StartKDramaMutationResult = ApolloReactCommon.MutationResult<Types.StartKDramaMutation>;\nexport type StartKDramaMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.StartKDramaMutation, Types.StartKDramaMutationVariables>;\nexport const SetEpisodesDocument = gql`\n    mutation SetEpisodes($id: ObjectId!, $counter: Float!) {\n  kDrama: updateOneKDrama(query: {_id: $id}, set: {currentEpisode: $counter}) {\n    _id\n    title\n    image\n    status\n    totalEpisodes\n    currentEpisode\n    rating\n  }\n}\n    `;\nexport type SetEpisodesMutationFn = ApolloReactCommon.MutationFunction<Types.SetEpisodesMutation, Types.SetEpisodesMutationVariables>;\n\n/**\n * __useSetEpisodesMutation__\n *\n * To run a mutation, you first call `useSetEpisodesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetEpisodesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setEpisodesMutation, { data, loading, error }] = useSetEpisodesMutation({\n *   variables: {\n *      id: // value for 'id'\n *      counter: // value for 'counter'\n *   },\n * });\n */\nexport function useSetEpisodesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.SetEpisodesMutation, Types.SetEpisodesMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.SetEpisodesMutation, Types.SetEpisodesMutationVariables>(SetEpisodesDocument, baseOptions);\n      }\nexport type SetEpisodesMutationHookResult = ReturnType<typeof useSetEpisodesMutation>;\nexport type SetEpisodesMutationResult = ApolloReactCommon.MutationResult<Types.SetEpisodesMutation>;\nexport type SetEpisodesMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.SetEpisodesMutation, Types.SetEpisodesMutationVariables>;\nexport const SetRatingDocument = gql`\n    mutation SetRating($id: ObjectId!, $rating: Float!) {\n  kDrama: updateOneKDrama(query: {_id: $id}, set: {rating: $rating}) {\n    _id\n    title\n    image\n    status\n    totalEpisodes\n    currentEpisode\n    rating\n  }\n}\n    `;\nexport type SetRatingMutationFn = ApolloReactCommon.MutationFunction<Types.SetRatingMutation, Types.SetRatingMutationVariables>;\n\n/**\n * __useSetRatingMutation__\n *\n * To run a mutation, you first call `useSetRatingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetRatingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setRatingMutation, { data, loading, error }] = useSetRatingMutation({\n *   variables: {\n *      id: // value for 'id'\n *      rating: // value for 'rating'\n *   },\n * });\n */\nexport function useSetRatingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.SetRatingMutation, Types.SetRatingMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.SetRatingMutation, Types.SetRatingMutationVariables>(SetRatingDocument, baseOptions);\n      }\nexport type SetRatingMutationHookResult = ReturnType<typeof useSetRatingMutation>;\nexport type SetRatingMutationResult = ApolloReactCommon.MutationResult<Types.SetRatingMutation>;\nexport type SetRatingMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.SetRatingMutation, Types.SetRatingMutationVariables>;\nexport const UpdateKDramaDocument = gql`\n    mutation UpdateKDrama($id: ObjectId!, $kDrama: KDramaUpdateInput!) {\n  kDrama: updateOneKDrama(query: {_id: $id}, set: $kDrama) {\n    _id\n    title\n    image\n    status\n    totalEpisodes\n    currentEpisode\n    rating\n  }\n}\n    `;\nexport type UpdateKDramaMutationFn = ApolloReactCommon.MutationFunction<Types.UpdateKDramaMutation, Types.UpdateKDramaMutationVariables>;\n\n/**\n * __useUpdateKDramaMutation__\n *\n * To run a mutation, you first call `useUpdateKDramaMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateKDramaMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateKDramaMutation, { data, loading, error }] = useUpdateKDramaMutation({\n *   variables: {\n *      id: // value for 'id'\n *      kDrama: // value for 'kDrama'\n *   },\n * });\n */\nexport function useUpdateKDramaMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.UpdateKDramaMutation, Types.UpdateKDramaMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.UpdateKDramaMutation, Types.UpdateKDramaMutationVariables>(UpdateKDramaDocument, baseOptions);\n      }\nexport type UpdateKDramaMutationHookResult = ReturnType<typeof useUpdateKDramaMutation>;\nexport type UpdateKDramaMutationResult = ApolloReactCommon.MutationResult<Types.UpdateKDramaMutation>;\nexport type UpdateKDramaMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.UpdateKDramaMutation, Types.UpdateKDramaMutationVariables>;","import React from \"react\";\nimport { Avatar, styled } from \"@material-ui/core\";\n\nimport { QuestionMarkIcon } from \"../icons\";\n\ninterface Props {\n  image: string | null | undefined;\n  size: number;\n  onClick: () => void;\n}\n\nconst RoundAvatar = styled(({ size, ...other }) => <Avatar {...other} />)({\n  height: (props: { size: number }) => props.size,\n  width: (props: { size: number }) => props.size,\n});\n\nconst SizedAvatar: React.FC<Props> = ({ image, size, onClick }) => {\n  if (image) return <RoundAvatar size={size} onClick={onClick} src={image} />;\n  return (\n    <RoundAvatar size={size} onClick={onClick}>\n      <QuestionMarkIcon style={{ fontSize: size }} />\n    </RoundAvatar>\n  );\n};\n\nexport default SizedAvatar;\n","import { Grid, Tooltip, withStyles, styled } from \"@material-ui/core\";\n\nconst TitleTooltip = withStyles(() => ({\n  tooltip: {\n    fontSize: 20,\n  },\n}))(Tooltip);\n\nconst StyledInnerGrid = styled(Grid)({\n  marginTop: 30,\n  marginBottom: 20,\n  width: 900,\n});\n\nconst StyledOuterGrid = styled(Grid)({\n  width: 1020,\n});\n\nexport { TitleTooltip, StyledInnerGrid, StyledOuterGrid };\n","const STATUSES = {\n  WATCHING: \"watching\",\n  COMPLETED: \"completed\",\n  PLANNED: \"planned\",\n};\n\nconst ACTIONS_TEXT: { [status: string]: string } = {\n  watching: \"Complete\",\n  completed: \"Completed\",\n  planned: \"Start Watching\",\n};\n\nconst STATUS_TEXT: { [status: string]: string } = {\n  watching: \"Currently watching\",\n  completed: \"Completed\",\n  planned: \"Next planned\",\n};\n\nconst PAGE_SIZE = 4;\n\nexport { STATUSES, ACTIONS_TEXT, STATUS_TEXT, PAGE_SIZE };\n","import React from \"react\";\nimport { Fab } from \"@material-ui/core\";\n\nimport SizedAvatar from \"../MainCard/SizedAvatar\";\nimport { TitleTooltip, StyledInnerGrid, StyledOuterGrid } from \"./styled\";\nimport { ArrowLeftIcon, ArrowRightIcon } from \"../icons\";\n\nimport { KDrama } from \"../../types\";\nimport { PAGE_SIZE } from \"../../Constants\";\n\ninterface Props {\n  list: KDrama[];\n  setDisplayedKDrama: (kDrama: KDrama) => void;\n  currentPage: number;\n  setCurrentPage: (page: number) => void;\n  isLoading: boolean;\n}\n\nconst DramaList: React.FC<Props> = ({\n  list,\n  currentPage,\n  setCurrentPage,\n  setDisplayedKDrama,\n}) => {\n  const displayedDramas = list.slice(\n    currentPage * PAGE_SIZE,\n    (currentPage + 1) * PAGE_SIZE\n  );\n\n  const handleClick = (kDrama: KDrama) => {\n    setDisplayedKDrama(kDrama);\n  };\n\n  const handlePreviousPage = () => {\n    const previousPage = currentPage - 1;\n    if (previousPage >= 0) setCurrentPage(previousPage);\n  };\n\n  const handleNextPage = () => {\n    const nextPage = currentPage + 1;\n    if (nextPage * PAGE_SIZE < list.length) setCurrentPage(nextPage);\n  };\n\n  return (\n    <StyledOuterGrid\n      container\n      direction=\"row\"\n      justify=\"space-between\"\n      alignItems=\"center\"\n    >\n      <Fab color=\"primary\" onClick={handlePreviousPage}>\n        <ArrowLeftIcon fontSize=\"large\" />\n      </Fab>\n      <StyledInnerGrid container direction=\"row\" justify=\"space-evenly\">\n        {displayedDramas.map((kDrama) => (\n          <TitleTooltip key={kDrama._id} title={kDrama.title}>\n            <SizedAvatar\n              size={150}\n              image={kDrama.image}\n              onClick={() => handleClick(kDrama)}\n            />\n          </TitleTooltip>\n        ))}\n      </StyledInnerGrid>\n\n      <Fab color=\"primary\" onClick={handleNextPage}>\n        <ArrowRightIcon fontSize=\"large\" />\n      </Fab>\n    </StyledOuterGrid>\n  );\n};\n\nexport default DramaList;\n","import { Card, CardActions, styled } from \"@material-ui/core\";\n\nconst StyledCard = styled(Card)({\n  width: 800,\n  marginTop: 50,\n});\n\nconst CardImage = styled(\"img\")({\n  height: 450,\n  width: 800,\n  objectFit: \"cover\",\n});\n\nconst PaddedCardActions = styled(CardActions)({\n  justifyContent: \"space-between\",\n  padding: \"8px 15px 15px 15px\",\n});\n\nexport { StyledCard, CardImage, PaddedCardActions };\n","import { withStyles } from \"@material-ui/core\";\nimport { Rating } from \"@material-ui/lab\";\nimport { blue } from \"@material-ui/core/colors\";\n\nconst StyledRating = withStyles({\n\ticonFilled: {\n\t\tcolor: blue[700],\n\t},\n})(Rating);\n\nexport default StyledRating;\n","import React, { useState, useEffect } from \"react\";\nimport { CardContent, Button, Typography } from \"@material-ui/core\";\n\nimport {\n  CardImage,\n  StyledCard,\n  PaddedCardActions\n} from \"./styled\";\nimport StyledRating from '../shared/StyledRating';\n\nimport { KDrama } from \"../../types\";\nimport { STATUSES, ACTIONS_TEXT, STATUS_TEXT } from \"../../Constants\";\n\ninterface Props {\n  kDrama: KDrama;\n  setEpisodes: (id: string, current: number) => void;\n  setStatus: (id: string, status: string) => void;\n  setRating: (id: string, rating: number) => void;\n}\n\nconst MainCard: React.FC<Props> = ({\n  kDrama,\n  setEpisodes,\n  setStatus,\n  setRating,\n}) => {\n  const [localRating, setLocalRating] = useState<number>(kDrama.rating ?? 0);\n\n  useEffect(() => {\n    setLocalRating(kDrama.rating ?? 0);\n  }, [kDrama, setLocalRating]);\n\n  const handleStart = () => {\n    setStatus(kDrama._id, STATUSES.WATCHING);\n    setEpisodes(kDrama._id, 1);\n  };\n\n  const handleComplete = () => {\n    setStatus(kDrama._id, STATUSES.COMPLETED);\n    setEpisodes(kDrama._id, kDrama.totalEpisodes);\n  };\n\n  const handleIncreaseEpisodes = () => {\n    if (kDrama.currentEpisode && kDrama.currentEpisode >= kDrama.totalEpisodes)\n      return;\n    if (kDrama.status === STATUSES.PLANNED) {\n      handleStart();\n    } else {\n      setEpisodes(kDrama._id, (kDrama.currentEpisode || 0) + 1);\n    }\n  };\n\n  const ACTIONS: { [key: string]: () => void } = {\n    watching: handleComplete,\n    completed: () => {},\n    planned: handleStart,\n  };\n\n  return (\n    <StyledCard elevation={5}>\n      <CardContent style={{ padding: \"0px\" }}>\n        {kDrama?.image && <CardImage src={kDrama.image} alt=\"kdrama\" />}\n        <Typography style={{ paddingLeft: \"15px\" }} variant=\"h5\">\n          {STATUS_TEXT[kDrama.status]}\n        </Typography>\n        <Typography\n          style={{ paddingLeft: \"15px\", fontWeight: \"bold\" }}\n          variant=\"h4\"\n        >\n          {kDrama.title ?? \"No currently watched KDrama\"}\n        </Typography>\n        <PaddedCardActions>\n          <StyledRating\n            value={localRating}\n            onChange={(e, value) => {\n              setLocalRating(value as number);\n              setRating(kDrama._id, value as number);\n            }}\n          />\n          <div>\n            <Button\n              style={{ marginRight: 5 }}\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => ACTIONS[kDrama.status]()}\n            >\n              {ACTIONS_TEXT[kDrama.status]}\n            </Button>\n            <Button\n              onClick={handleIncreaseEpisodes}\n              variant=\"outlined\"\n              color=\"primary\"\n            >\n              {`${kDrama.currentEpisode ?? \"0\"}/${kDrama.totalEpisodes}`}\n            </Button>\n          </div>\n        </PaddedCardActions>\n      </CardContent>\n    </StyledCard>\n  );\n};\n\nexport default MainCard;\n","import { Fab, ButtonGroup, Button, styled } from \"@material-ui/core\";\nimport { green, lightGreen } from \"@material-ui/core/colors\";\n\nconst RankingFab = styled(Fab)({\n  position: \"fixed\",\n  right: \"80px\",\n  bottom: \"320px\",\n  color: \"white\",\n  backgroundColor: lightGreen[600],\n});\n\nconst FilterGroupFab = styled(Fab)({\n  position: \"fixed\",\n  right: \"80px\",\n  bottom: \"240px\",\n  backgroundColor: green[700],\n  color: \"white\",\n});\n\nconst FilterButtonGroup = styled(ButtonGroup)({\n  position: \"fixed\",\n  right: \"160px\",\n  bottom: \"200px\",\n});\n\nconst FilterButton = styled(Button)({\n  color: green[700],\n  borderColor: green[700],\n});\n\nexport { RankingFab, FilterButton, FilterButtonGroup, FilterGroupFab };\n","import React, { useState } from \"react\";\nimport { Fab } from \"@material-ui/core\";\n\nimport {\n  FilterGroupFab,\n  RankingFab,\n  FilterButtonGroup,\n  FilterButton,\n} from \"./styled\";\nimport {\n  ExitToAppIcon,\n  AddIcon,\n  FilterIcon,\n  StarIcon,\n  SettingsIcon,\n  EditIcon,\n} from \"../icons\";\n\nimport { STATUSES } from \"../../Constants\";\n\ninterface Props {\n  logOut: () => Promise<void>;\n  openAddForm: () => void;\n  openRanking: () => void;\n  setFilter: (status: string | null) => void;\n  resetPage: () => void;\n  openEditForm: () => void;\n}\n\nconst FabGroup: React.FC<Props> = ({\n  logOut,\n  openAddForm,\n  openRanking,\n  setFilter,\n  resetPage,\n  openEditForm,\n}) => {\n  const [showFilterList, setShowFilterList] = useState<boolean>(false);\n  const [showSettings, setShowSettings] = useState<boolean>(false);\n\n  const handleClick = (status: string | null) => {\n    setFilter(status);\n    resetPage();\n    setShowFilterList(false);\n  };\n\n  const toggleFilterList = () => {\n    setShowFilterList(!showFilterList);\n  };\n\n  const toggleSettings = () => {\n    setShowSettings(!showSettings);\n  };\n\n  return (\n    <>\n      <RankingFab onClick={openRanking}>\n        <StarIcon />\n      </RankingFab>\n      <FilterGroupFab onClick={toggleFilterList}>\n        <FilterIcon />\n      </FilterGroupFab>\n      {showFilterList && (\n        <FilterButtonGroup variant=\"outlined\" orientation=\"vertical\">\n          <FilterButton onClick={() => handleClick(STATUSES.PLANNED)}>\n            Planned\n          </FilterButton>\n          <FilterButton onClick={() => handleClick(STATUSES.WATCHING)}>\n            Watching\n          </FilterButton>\n          <FilterButton onClick={() => handleClick(STATUSES.COMPLETED)}>\n            Completed\n          </FilterButton>\n          <FilterButton onClick={() => handleClick(null)}>All</FilterButton>\n        </FilterButtonGroup>\n      )}\n      <Fab\n        style={{ position: \"fixed\", right: \"80px\", bottom: \"160px\" }}\n        color=\"secondary\"\n        onClick={openAddForm}\n      >\n        <AddIcon />\n      </Fab>\n      <Fab\n        style={{ position: \"fixed\", right: \"80px\", bottom: \"80px\" }}\n        color=\"primary\"\n        onClick={toggleSettings}\n      >\n        <SettingsIcon />\n      </Fab>\n      {showSettings && (\n        <>\n          <Fab\n            style={{ position: \"fixed\", right: \"160px\", bottom: \"80px\" }}\n            color=\"primary\"\n            onClick={() => logOut()}\n          >\n            <ExitToAppIcon />\n          </Fab>\n          <Fab\n            style={{ position: \"fixed\", right: \"240px\", bottom: \"80px\" }}\n            color=\"primary\"\n            onClick={openEditForm}\n          >\n            <EditIcon />\n          </Fab>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FabGroup;\n","import { ButtonGroup, styled } from \"@material-ui/core\";\n\nconst StyledButtonGroup = styled(ButtonGroup)({\n  display: \"flex\",\n  alignSelf: \"flex-end\",\n  marginTop: 20,\n});\n\nexport { StyledButtonGroup };\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  TextField,\n  Select,\n  MenuItem,\n  Button,\n} from \"@material-ui/core\";\n\nimport { StyledButtonGroup } from \"./styled\";\n\nimport { STATUSES } from \"../../Constants\";\nimport { KDramaInsertInput, KDrama, KDramaUpdateInput } from \"../../types\";\n\ninterface Props {\n  isOpen: boolean;\n  closeModal: () => void;\n  addKDrama: (data: KDramaInsertInput) => void;\n  editMode?: boolean;\n  editedKDrama?: KDrama;\n  updateKDrama: (data: KDramaUpdateInput) => void;\n  deleteKDrama: () => void;\n}\n\ninterface FormErrors {\n  title?: string;\n  episodes?: string;\n  currEp?: string;\n}\n\nconst AddKDramaForm: React.FC<Props> = ({\n  isOpen,\n  closeModal,\n  addKDrama,\n  editMode,\n  editedKDrama,\n  updateKDrama,\n  deleteKDrama,\n}) => {\n  const [status, setStatus] = useState<string>(STATUSES.PLANNED);\n  const [title, setTitle] = useState<string>(\"\");\n  const [image, setImage] = useState<string>(\"\");\n  const [totalEpisodes, setTotalEpisodes] = useState<number>(0);\n  const [currentEpisode, setCurrentEpisode] = useState<number>(0);\n  const [errors, setErrors] = useState<FormErrors>();\n\n  useEffect(() => {\n    if (editMode) {\n      setStatus(editedKDrama?.status || \"\");\n      setTitle(editedKDrama?.title || \"\");\n      setImage(editedKDrama?.image || \"\");\n      setTotalEpisodes(editedKDrama?.totalEpisodes || 0);\n      setCurrentEpisode(editedKDrama?.currentEpisode || 0);\n    }\n  }, [editMode, editedKDrama]);\n\n  const inputData = {\n    title,\n    image,\n    status,\n    totalEpisodes,\n    currentEpisode,\n  };\n\n  const validate = (): boolean => {\n    let isValid = true;\n    const newErrors: FormErrors = {};\n\n    if (!title || title.length === 0) {\n      newErrors.title = \"Title must not be empty\";\n      isValid = false;\n    }\n\n    if (totalEpisodes <= 0) {\n      newErrors.episodes = \"Episodes must be over 0\";\n      isValid = false;\n    }\n\n    if (status === STATUSES.WATCHING) {\n      if (currentEpisode <= 0) {\n        newErrors.currEp = \"Current episode must be over 0\";\n        isValid = false;\n      }\n      if (currentEpisode >= totalEpisodes) {\n        newErrors.currEp =\n          \"Current episode must be lower than the total number of episodes\";\n        isValid = false;\n      }\n    }\n\n    setErrors(newErrors);\n\n    return isValid;\n  };\n\n  const handleClose = () => {\n    setStatus(STATUSES.PLANNED);\n    setTitle(\"\");\n    setImage(\"\");\n    setTotalEpisodes(0);\n    closeModal()\n  }\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (validate()) {\n      if (editMode) {\n        updateKDrama(inputData)\n      } else {\n        addKDrama(inputData);\n      }\n      handleClose();\n    }\n  };\n\n  const handleDelete = () => {\n    handleClose();\n    deleteKDrama();\n  }\n\n  useEffect(() => {\n    switch (status) {\n      case STATUSES.PLANNED:\n        setCurrentEpisode(0);\n        break;\n      case STATUSES.WATCHING:\n        setCurrentEpisode(1);\n        break;\n      case STATUSES.COMPLETED:\n        setCurrentEpisode(totalEpisodes);\n        break;\n    }\n  }, [status, totalEpisodes]);\n\n  return (\n    <Dialog fullWidth open={isOpen} onClose={handleClose}>\n      <form onSubmit={handleSubmit}>\n        <DialogTitle>Add KDrama</DialogTitle>\n        <DialogContent style={{ display: \"flex\", flexDirection: \"column\" }}>\n          <DialogContentText>\n            Enter the new KDrama's information\n          </DialogContentText>\n          <TextField\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            autoFocus\n            margin=\"dense\"\n            label=\"Title*\"\n            error={!!errors?.title}\n            helperText={errors?.title}\n          />\n          <TextField\n            value={image}\n            onChange={(e) => setImage(e.target.value)}\n            margin=\"dense\"\n            label=\"Image Link\"\n          />\n          <Select\n            onChange={(e) => setStatus(e.target.value as string)}\n            value={status}\n            required\n            style={{ margin: \"21px 0px 4px 0px\" }}\n          >\n            <MenuItem value={STATUSES.WATCHING}>Watching</MenuItem>\n            <MenuItem value={STATUSES.COMPLETED}>Completed</MenuItem>\n            <MenuItem value={STATUSES.PLANNED}>Planned</MenuItem>\n          </Select>\n          <TextField\n            value={totalEpisodes}\n            onChange={(e) => setTotalEpisodes(parseInt(e.target.value))}\n            type=\"number\"\n            margin=\"dense\"\n            label=\"Total Episodes*\"\n            error={!!errors?.episodes}\n            helperText={errors?.episodes}\n          />\n          <TextField\n            value={currentEpisode}\n            onChange={(e) => setCurrentEpisode(parseInt(e.target.value))}\n            type=\"number\"\n            margin=\"dense\"\n            label=\"Current Episode*\"\n            error={!!errors?.currEp}\n            helperText={errors?.currEp}\n          />\n          <StyledButtonGroup>\n            <Button type=\"submit\" color=\"primary\" variant=\"outlined\">\n              {editMode ? \"Edit\" : \"Add\"}\n            </Button>\n            {editMode && (\n              <Button onClick={handleDelete} color=\"primary\" variant=\"outlined\">\n                Delete\n              </Button>\n            )}\n          </StyledButtonGroup>\n        </DialogContent>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default AddKDramaForm;\n","import React from \"react\";\nimport {\n  styled,\n  Dialog,\n  DialogTitle,\n  Typography,\n  Avatar,\n  TableRow,\n  Table,\n  TableCell,\n} from \"@material-ui/core\";\n\nimport StyledRating from \"./shared/StyledRating\";\nimport { QuestionMarkIcon } from \"./icons\";\n\nimport { KDrama } from \"../types\";\n\nconst SmallAvatar = styled(Avatar)({\n  height: 70,\n  width: 70,\n});\n\ninterface Props {\n  kDramas: KDrama[];\n  isOpen: boolean;\n  handleClose: () => void;\n}\n\nconst Ranking: React.FC<Props> = ({ kDramas, isOpen, handleClose }) => (\n  <Dialog open={isOpen} onClose={handleClose} fullWidth>\n    <DialogTitle>\n      <Typography variant=\"h3\">Ranking</Typography>\n    </DialogTitle>\n    <Table>\n      {kDramas\n        .filter(({ rating }) => rating && rating !== 0)\n        .sort((a, b) => b.rating! - a.rating!)\n        .map(({ title, rating, image }, index) => (\n          <TableRow key={index}>\n            <TableCell>\n              <Typography variant=\"h4\">{index + 1}</Typography>\n            </TableCell>\n            <TableCell>\n              {image ? (\n                <SmallAvatar src={image} />\n              ) : (\n                <SmallAvatar>\n                  <QuestionMarkIcon style={{ fontSize: \"150px\" }} />\n                </SmallAvatar>\n              )}\n            </TableCell>\n            <TableCell>\n              <Typography variant=\"h5\">{title}</Typography>\n            </TableCell>\n            <TableCell>\n              <StyledRating readOnly value={rating} />\n            </TableCell>\n          </TableRow>\n        ))}\n    </Table>\n  </Dialog>\n);\n\nexport default Ranking;\n","import { KDrama } from \"./types\";\n\nconst replaceKDrama = (newKDrama: KDrama, kDramas: KDrama[]) => {\n  const updatedKDramas = [...kDramas];\n  for (let i = 0; i < kDramas.length; i++) {\n    const currentId = kDramas[i]._id;\n    if (currentId === newKDrama._id) {\n      updatedKDramas[i] = newKDrama;\n      break;\n    }\n  }\n  return updatedKDramas;\n};\n\nexport { replaceKDrama };\n","import React, { useState, useMemo, useCallback } from \"react\";\nimport { Typography, CircularProgress, Grid, styled } from \"@material-ui/core\";\n\nimport { useRealmApp } from \"../realm/RealmApp\";\nimport {\n  useGetAllKDramasQuery,\n  useAddKDramaMutation,\n  useSetKDramaStatusMutation,\n  useSetEpisodesMutation,\n  useSetRatingMutation,\n  useDeleteKDramaMutation,\n  useUpdateKDramaMutation,\n} from \"../graphql-operations\";\n\nimport KDramaList from \"./DramaList/DramaList\";\nimport MainCard from \"./MainCard/MainCard\";\nimport FabGroup from \"./FabGroup/FabGroup\";\nimport AddKDramaForm from \"./AddKDramaForm/AddKDramaForm\";\nimport Ranking from \"./Ranking\";\n\nimport {\n  GetAllKDramasQuery,\n  KDrama,\n  KDramaInsertInput,\n  KDramaUpdateInput,\n} from \"../types\";\nimport { PAGE_SIZE, STATUSES } from \"../Constants\";\nimport { replaceKDrama } from \"../utils\";\n\nconst StyledBackgroundGrid = styled(Grid)({\n  background:\n    \"linear-gradient(130deg, rgba(174,229,238,1) 0%, rgba(75,160,255,1) 100%)\",\n  height: \"100vh\",\n  borderRadius: \"0% 0% 80% 0%\",\n});\n\nconst Board: React.FC = () => {\n  const [kDramas, setKDramas] = useState<KDrama[]>([]);\n  const [displayedKDrama, setDisplayedKDrama] = useState<KDrama | undefined>();\n  const [isFormOpen, setIsFormOpen] = useState<boolean>(false);\n  const [isEdit, setIsEdit] = useState<boolean>(false);\n  const [isRankingOpen, setIsRankingOpen] = useState<boolean>(false);\n  const [currentListPage, setCurrentListPage] = useState<number>(0);\n  const [statusFilter, setStatusFilter] = useState<string | null>(null);\n  const filteredKDramas = useMemo(\n    () =>\n      kDramas.filter(({ status }) =>\n        statusFilter ? status === statusFilter : true\n      ),\n    [statusFilter, kDramas]\n  );\n\n  const { logOut } = useRealmApp();\n  const [addKDramaMutation] = useAddKDramaMutation();\n  const [updateKDramaMutation] = useUpdateKDramaMutation();\n  const [deleteKDramaMutation] = useDeleteKDramaMutation();\n  const [setKDramaStatusMutation] = useSetKDramaStatusMutation();\n  const [setEpisodesMutation] = useSetEpisodesMutation();\n  const [setRatingMutation] = useSetRatingMutation();\n  const { loading } = useGetAllKDramasQuery({\n    onCompleted: (data: GetAllKDramasQuery) => {\n      if (data?.kDramas) {\n        const result = data.kDramas as KDrama[];\n        setKDramas(result);\n        const watchedKDrama =\n          result.find(({ status }) => status === STATUSES.WATCHING) ||\n          result.find(({ status }) => status === STATUSES.PLANNED);\n        setDisplayedKDrama(watchedKDrama);\n      }\n    },\n  });\n\n  const handleEdit = () => {\n    setIsEdit(true);\n    setIsFormOpen(true);\n  };\n\n  const handleClose = () => {\n    setIsFormOpen(false);\n    setIsEdit(false);\n  };\n\n  const handleAdd = async (data: KDramaInsertInput) => {\n    const currentKDramas = [...kDramas];\n    try {\n      const result = await addKDramaMutation({ variables: { kDrama: data } });\n      const newKDrama = result.data?.kDrama as KDrama;\n      setKDramas([...currentKDramas, newKDrama]);\n    } catch (err) {\n      setKDramas(currentKDramas);\n      throw new Error(\"Couldn't add new KDrama\");\n    }\n  };\n\n  const handleUpdate = async (data: KDramaUpdateInput) => {\n    const currentKDramas = [...kDramas];\n    try {\n      const result = await updateKDramaMutation({\n        variables: { id: displayedKDrama?._id, kDrama: data },\n      });\n      const updatedKDrama = result.data?.kDrama as KDrama;\n      setDisplayedKDrama(updatedKDrama);\n      setKDramas(replaceKDrama(updatedKDrama, currentKDramas));\n    } catch (err) {\n      setKDramas(currentKDramas);\n      throw new Error(\"Couldn't update KDrama\");\n    }\n  };\n\n  const handleDelete = async () => {\n    const currentKDramas = [...kDramas];\n    const newListPage =\n      currentKDramas.length % PAGE_SIZE === 1\n        ? currentListPage - 1\n        : currentListPage;\n    try {\n      const result = await deleteKDramaMutation({\n        variables: { id: displayedKDrama?._id },\n      });\n      const deleted = result.data?.kDrama as KDrama;\n      setKDramas([...currentKDramas.filter(({ _id }) => _id !== deleted._id)]);\n      setDisplayedKDrama(\n        currentKDramas.find(({ status }) => status === STATUSES.WATCHING) ||\n          currentKDramas.find(({ status }) => status === STATUSES.PLANNED)\n      );\n      setCurrentListPage(newListPage);\n    } catch (err) {\n      setKDramas(currentKDramas);\n      throw new Error(\"Couldn't delete KDrama\");\n    }\n  };\n\n  const setEpisodes = useCallback(\n    async (id: string, current: number) => {\n      const currentKDramas = [...kDramas];\n      try {\n        setDisplayedKDrama({\n          ...displayedKDrama!,\n          currentEpisode: current,\n        });\n        const result = await setEpisodesMutation({\n          variables: { id, counter: current },\n        });\n        const updatedKDrama = result.data?.kDrama as KDrama;\n        currentKDramas[\n          currentKDramas.findIndex(({ _id }) => _id === updatedKDrama._id)\n        ] = updatedKDrama;\n        setDisplayedKDrama(updatedKDrama);\n        setKDramas(currentKDramas);\n      } catch (err) {\n        setKDramas(currentKDramas);\n        throw new Error(\"Couldn't increase episodes\");\n      }\n    },\n    [kDramas, displayedKDrama, setEpisodesMutation, setDisplayedKDrama]\n  );\n\n  const setStatus = useCallback(\n    async (id: string, status: string) => {\n      const currentKDramas = [...kDramas];\n      try {\n        setDisplayedKDrama({ ...displayedKDrama!, status: status });\n        const result = await setKDramaStatusMutation({\n          variables: { id, status },\n        });\n        const updatedKDrama = result.data?.kDrama as KDrama;\n        currentKDramas[\n          currentKDramas.findIndex(({ _id }) => _id === updatedKDrama._id)\n        ] = updatedKDrama;\n        setDisplayedKDrama(updatedKDrama);\n        setKDramas(currentKDramas);\n      } catch (err) {\n        setKDramas(currentKDramas);\n        throw new Error(\"Couldn't set status\");\n      }\n    },\n    [kDramas, displayedKDrama, setKDramaStatusMutation, setDisplayedKDrama]\n  );\n\n  const setRating = useCallback(\n    async (id: string, rating: number) => {\n      const currentKDramas = [...kDramas];\n      try {\n        const result = await setRatingMutation({\n          variables: { id, rating },\n        });\n        const updatedKDrama = result.data?.kDrama as KDrama;\n        currentKDramas[\n          currentKDramas.findIndex(({ _id }) => _id === updatedKDrama._id)\n        ] = updatedKDrama;\n        setKDramas(currentKDramas);\n      } catch (err) {\n        setKDramas(currentKDramas);\n        throw new Error(\"Couldn't set status\");\n      }\n    },\n    [kDramas, setRatingMutation]\n  );\n\n  const renderCard = useCallback(() => {\n    if (loading) return <CircularProgress size={200} />;\n\n    if (!displayedKDrama)\n      return <Typography variant=\"h2\">No KDrama in Queue</Typography>;\n\n    return (\n      <MainCard\n        kDrama={displayedKDrama}\n        setStatus={setStatus}\n        setEpisodes={setEpisodes}\n        setRating={setRating}\n      />\n    );\n  }, [loading, displayedKDrama, setStatus, setEpisodes, setRating]);\n\n  return (\n    <StyledBackgroundGrid\n      container\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"space-evenly\"\n    >\n      {renderCard()}\n      <KDramaList\n        setDisplayedKDrama={setDisplayedKDrama}\n        list={filteredKDramas}\n        currentPage={currentListPage}\n        setCurrentPage={setCurrentListPage}\n        isLoading={loading}\n      />\n      <FabGroup\n        setFilter={setStatusFilter}\n        openAddForm={() => setIsFormOpen(true)}\n        openEditForm={handleEdit}\n        openRanking={() => setIsRankingOpen(true)}\n        resetPage={() => setCurrentListPage(0)}\n        logOut={logOut}\n      />\n      <AddKDramaForm\n        addKDrama={handleAdd}\n        updateKDrama={handleUpdate}\n        closeModal={handleClose}\n        isOpen={isFormOpen}\n        editMode={isEdit}\n        editedKDrama={isEdit ? displayedKDrama : undefined}\n        deleteKDrama={handleDelete}\n      />\n      <Ranking\n        handleClose={() => setIsRankingOpen(false)}\n        isOpen={isRankingOpen}\n        kDramas={kDramas}\n      />\n    </StyledBackgroundGrid>\n  );\n};\n\nexport default Board;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport { cyan, blue, green } from \"@material-ui/core/colors\";\n\ndeclare module \"@material-ui/core/styles/createPalette\" {\n\tinterface Palette {\n\t\tneutral: PaletteColor;\n\t}\n\tinterface PaletteOptions {\n\t\tneutral: PaletteColorOptions;\n\t}\n}\n\nconst theme = createMuiTheme({\n\tpalette: {\n\t\tneutral: {\n\t\t\tmain: green[700],\n\t\t},\n\t\tprimary: {\n\t\t\tmain: blue[700],\n\t\t},\n\t\tsecondary: {\n\t\t\tmain: cyan[700],\n\t\t},\n\t},\n});\n\nexport default theme;\n","import React from \"react\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\n\nimport RealmApp, { useRealmApp } from \"./realm/RealmApp\";\nimport RealmApolloProvider from \"./realm/RealmApolloProvider\";\nimport LoginScreen from \"./components/LoginScreen\";\nimport Board from \"./components/Board\";\nimport theme from \"./theme\";\n\nconst App: React.FC = (props) => {\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<RealmApp>\n\t\t\t\t<RequireAuthentication />\n\t\t\t</RealmApp>\n\t\t</ThemeProvider>\n\t);\n};\nexport default App;\n\nfunction RequireAuthentication() {\n\tconst app = useRealmApp();\n\tif (!app) {\n\t\treturn <div>Loading</div>;\n\t}\n\treturn app.user ? (\n\t\t<RealmApolloProvider>\n\t\t\t<Board />\n\t\t</RealmApolloProvider>\n\t) : (\n\t\t<LoginScreen />\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}