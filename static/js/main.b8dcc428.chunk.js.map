{"version":3,"sources":["realm/RealmApp.tsx","realm/RealmApolloProvider.tsx","components/LoginScreen.tsx","graphql-operations.ts","Constants.ts","components/DramaList.tsx","components/MainCard.tsx","components/FabGroup.tsx","components/AddKDramaForm.tsx","components/Board.tsx","theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["app","Realm","id","RealmAppContext","React","undefined","RealmApp","children","appRef","currentUser","user","setUser","current","registerUser","email","password","a","emailPasswordAuth","context","logIn","credentials","emailPassword","logOut","Provider","value","useRealmApp","Error","RealmApolloProvider","createApolloClient","client","setClient","realmAppId","graphql_url","ApolloClient","link","HttpLink","uri","fetch","options","headers","refreshCustomData","authenticatedOptions","Authorization","accessToken","cache","InMemoryCache","LoginScreen","useState","setEmail","setPassword","error","setError","handleAuthenticationError","err","console","parts","message","split","reason","length","trimStart","status","reasonRegex","match","groups","parseAuthenticationError","prevErr","handleLogin","e","Container","Paper","elevation","style","paddingTop","paddingBottom","marginTop","display","flexDirection","alignItems","Typography","variant","TextField","margin","fullWidth","label","type","helperText","onChange","target","Button","color","onClick","GetAllKDramasDocument","gql","AddKDramaDocument","SetKDramaStatusDocument","SetEpisodesDocument","STATUSES","ACTIONS_TEXT","watching","completed","planned","STATUS_TEXT","TitleTooltip","withStyles","tooltip","fontSize","Tooltip","BigAvatar","styled","Avatar","height","width","StyledInnerGrid","Grid","marginBottom","StyledOuterGrid","DramaList","list","setDisplayedKDrama","currentPage","setCurrentPage","displayedDramas","slice","container","direction","justify","Fab","previousPage","map","kDrama","key","_id","title","image","handleClick","src","nextPage","StyledCard","Card","CardImage","objectFit","PaddedCardActions","CardActions","justifyContent","padding","MainCard","setEpisodes","setStatus","ACTIONS","totalEpisodes","CardContent","alt","paddingLeft","fontWeight","currentEpisode","FilterGroupFab","position","right","bottom","backgroundColor","green","FilterButtonGroup","ButtonGroup","FilterButton","borderColor","FabGroup","handleOpen","setFilter","showFilterList","setShowFilterList","orientation","SubmitButton","alignSelf","AddKDramaForm","isOpen","handleClose","addKDrama","setTitle","setImage","setTotalEpisodes","inputData","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","required","autoFocus","Select","MenuItem","parseInt","StyledBackgroundGrid","background","borderRadius","Board","baseOptions","kDramas","setKDramas","watchedKDrama","find","displayedKDrama","setIsOpen","statusFilter","setStatusFilter","filteredKDramas","useMemo","filter","ApolloReactHooks","addKDramaMutation","useSetKDramaStatusMutation","setKDramaStatusMutation","useSetEpisodesMutation","setEpisodesMutation","loading","useGetAllKDramasQuery","onCompleted","data","handleSubmit","currentKDramas","variables","result","newKDrama","useCallback","counter","updatedKDrama","findIndex","renderCard","CircularProgress","size","isLoading","theme","createMuiTheme","palette","neutral","main","primary","blue","secondary","cyan","App","props","ThemeProvider","RequireAuthentication","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b8dcc428.chunk.js","sourcesContent":["import * as React from \"react\";\nimport * as Realm from \"realm-web\";\n\nconst REALM_APP_ID = \"mykdramalist-svqcx\"\nconst app = new Realm.App({ id: REALM_APP_ID });\n\nconst RealmAppContext = React.createContext<IRealmApp | void>(undefined);\n\ninterface IRealmApp {\n  id: string;\n  user: Realm.User | null;\n  logIn: (email: string, password: string) => Promise<void>;\n  logOut: () => Promise<void>;\n  registerUser(email: string, password: string): Promise<void>;\n}\n\nconst RealmApp: React.FC = ({ children }) => {\n  // Keep track of the current user in local state\n  const appRef = React.useRef(app);\n  const [user, setUser] = React.useState(app.currentUser);\n  React.useEffect(() => {\n    setUser(app.currentUser);\n  }, [appRef.current.currentUser]);\n  \n  // Let new users register an account\n  const registerUser = async (email: string, password: string) => {\n    return await app.emailPasswordAuth.registerUser(email, password);\n  }\n  \n  // Let registered users log in\n  const logIn = async (email: string, password: string) => {\n    const credentials = Realm.Credentials.emailPassword(email, password);\n    await app.logIn(credentials);\n    setUser(app.currentUser);\n  }\n  \n  // Let logged in users log out\n  const logOut = async () => {\n    await app.currentUser?.logOut();\n    setUser(app.currentUser);\n  }\n  \n  // Provide the current user and authentication methods to the wrapped tree\n  const context: IRealmApp = {\n    id: REALM_APP_ID,\n    user,\n    logIn,\n    logOut,\n    registerUser,\n  };\n  return (\n    <RealmAppContext.Provider value={context}>\n      {children}\n    </RealmAppContext.Provider>\n  );\n};\nexport default RealmApp;\n\nexport const useRealmApp = (): IRealmApp => {\n  const app = React.useContext(RealmAppContext);\n  if (!app) {\n    throw new Error(\"You must call useRealmApp() inside of a <RealmApp />.\");\n  }\n  return app;\n};","import * as React from \"react\";\nimport * as Realm from \"realm-web\";\nimport { useRealmApp } from \"./RealmApp\";\n\n// Apollo\nimport {\n  ApolloProvider,\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport { NormalizedCacheObject } from \"@apollo/client/cache\";\n\nconst RealmApolloProvider: React.FC = ({ children }) => {\n  const { id, user } = useRealmApp();\n  const [client, setClient] = React.useState(\n    createApolloClient(id, user as Realm.User)\n  );\n  React.useEffect(() => {\n    setClient(createApolloClient(id, user as Realm.User));\n  }, [id, user]);\n\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\nexport default RealmApolloProvider;\n\n// TODO: Implement createApolloClient()\nfunction createApolloClient(\n  realmAppId: string,\n  user: Realm.User\n): ApolloClient<NormalizedCacheObject> {\n  const graphql_url = `https://realm.mongodb.com/api/client/v2.0/app/${realmAppId}/graphql`;\n  \n  const client = new ApolloClient({\n    link: new HttpLink({\n      uri: graphql_url,\n      fetch: async (uri: RequestInfo, options: RequestInit) => {\n        if (!options.headers) {\n          options.headers = {} as Record<string, string>;\n        }\n        // Refreshing custom data also ensures a valid access token\n        await user.refreshCustomData();\n        const authenticatedOptions: RequestInit = {\n          ...options,\n          headers: {\n            ...options.headers,\n            Authorization: `Bearer ${user.accessToken}`\n          }\n        }\n        return fetch(uri, authenticatedOptions);\n      },\n    }),\n    cache: new InMemoryCache(),\n  });\n\n  return client\n}","import React, { useState } from \"react\";\nimport {\n\tContainer,\n\tTextField,\n\tButton,\n\tPaper,\n\tTypography,\n} from \"@material-ui/core\";\n\nimport { useRealmApp } from \"../realm/RealmApp\";\n\nconst LoginScreen: React.FC = () => {\n\tconst app = useRealmApp();\n\n\t// Keep track of form input state\n\tconst [email, setEmail] = useState<string>(\"\");\n\tconst [password, setPassword] = useState<string>(\"\");\n\n\t// Keep track of input validation/errors\n\tconst [error, setError] = React.useState<{\n\t\temail?: string;\n\t\tpassword?: string;\n\t}>({});\n\n\tfunction parseAuthenticationError(err: Error) {\n\t\tconst parts = err.message.split(\":\");\n\t\tconst reason = parts[parts.length - 1].trimStart();\n\t\tif (!reason) return { status: \"\", message: \"\" };\n\t\tconst reasonRegex = /(?<message>.+)\\s\\(status (?<status>[0-9][0-9][0-9])/;\n\t\tconst match = reason.match(reasonRegex);\n\t\tconst { status, message } = match?.groups ?? {};\n\t\treturn { status, message };\n\t}\n\n\tfunction handleAuthenticationError(err: Error) {\n\t\tconsole.error(err);\n\t\tconst { status, message } = parseAuthenticationError(err);\n\t\tconst errorType = message || status;\n\t\tswitch (errorType) {\n\t\t\tcase \"invalid username\":\n\t\t\t\tsetError((prevErr) => ({\n\t\t\t\t\t...prevErr,\n\t\t\t\t\temail: \"Invalid email address.\",\n\t\t\t\t}));\n\t\t\t\tbreak;\n\t\t\tcase \"invalid username/password\":\n\t\t\tcase \"invalid password\":\n\t\t\tcase \"401\":\n\t\t\t\tsetError((err) => ({ ...err, password: \"Incorrect password.\" }));\n\t\t\t\tbreak;\n\t\t\tcase \"name already in use\":\n\t\t\tcase \"409\":\n\t\t\t\tsetError((err) => ({ ...err, email: \"Email is already registered.\" }));\n\t\t\t\tbreak;\n\t\t\tcase \"password must be between 6 and 128 characters\":\n\t\t\tcase \"400\":\n\t\t\t\tsetError((err) => ({\n\t\t\t\t\t...err,\n\t\t\t\t\tpassword: \"Password must be between 6 and 128 characters.\",\n\t\t\t\t}));\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tconst handleLogin = async () => {\n\t\tsetError((e) => ({ ...e, password: undefined }));\n\t\ttry {\n\t\t\treturn await app.logIn(email, password);\n\t\t} catch (err) {\n\t\t\thandleAuthenticationError(err);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<Paper\n\t\t\t\televation={4}\n\t\t\t\tstyle={{\n\t\t\t\t\tpaddingTop: \"70px\",\n\t\t\t\t\tpaddingBottom: \"70px\",\n\t\t\t\t\tmarginTop: \"200px\",\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tflexDirection: \"column\",\n\t\t\t\t\talignItems: \"center\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Typography variant=\"h2\">My KDrama List</Typography>\n\t\t\t\t<form>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tstyle={{ margin: \"8px\", marginTop: \"38px\" }}\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tid=\"email\"\n\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\terror={!!error.email}\n\t\t\t\t\t\thelperText={error.email}\n\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tstyle={{ margin: \"8px\" }}\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\terror={!!error.password}\n\t\t\t\t\t\thelperText={error.password}\n\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tstyle={{ margin: \"8px\", marginTop: \"38px\" }}\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tonClick={() => handleLogin()}\n\t\t\t\t\t>\n\t\t\t\t\t\tLog In\n\t\t\t\t\t</Button>\n\t\t\t\t</form>\n\t\t\t</Paper>\n\t\t</Container>\n\t);\n};\n\nexport default LoginScreen;\n","import * as Types from './types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/client';\n\nexport const GetAllKDramasDocument = gql`\n    query GetAllKDramas {\n  kDramas {\n    _id\n    title\n    image\n    status\n    totalEpisodes\n    currentEpisode\n    rating\n  }\n}\n    `;\n\n/**\n * __useGetAllKDramasQuery__\n *\n * To run a query within a React component, call `useGetAllKDramasQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllKDramasQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllKDramasQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllKDramasQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>) {\n        return ApolloReactHooks.useQuery<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>(GetAllKDramasDocument, baseOptions);\n      }\nexport function useGetAllKDramasLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>(GetAllKDramasDocument, baseOptions);\n        }\nexport type GetAllKDramasQueryHookResult = ReturnType<typeof useGetAllKDramasQuery>;\nexport type GetAllKDramasLazyQueryHookResult = ReturnType<typeof useGetAllKDramasLazyQuery>;\nexport type GetAllKDramasQueryResult = ApolloReactCommon.QueryResult<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>;\nexport const AddKDramaDocument = gql`\n    mutation AddKDrama($kDrama: KDramaInsertInput!) {\n  kDrama: insertOneKDrama(data: $kDrama) {\n    _id\n    title\n    image\n    status\n    totalEpisodes\n    currentEpisode\n    rating\n  }\n}\n    `;\nexport type AddKDramaMutationFn = ApolloReactCommon.MutationFunction<Types.AddKDramaMutation, Types.AddKDramaMutationVariables>;\n\n/**\n * __useAddKDramaMutation__\n *\n * To run a mutation, you first call `useAddKDramaMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddKDramaMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addKDramaMutation, { data, loading, error }] = useAddKDramaMutation({\n *   variables: {\n *      kDrama: // value for 'kDrama'\n *   },\n * });\n */\nexport function useAddKDramaMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.AddKDramaMutation, Types.AddKDramaMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.AddKDramaMutation, Types.AddKDramaMutationVariables>(AddKDramaDocument, baseOptions);\n      }\nexport type AddKDramaMutationHookResult = ReturnType<typeof useAddKDramaMutation>;\nexport type AddKDramaMutationResult = ApolloReactCommon.MutationResult<Types.AddKDramaMutation>;\nexport type AddKDramaMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.AddKDramaMutation, Types.AddKDramaMutationVariables>;\nexport const SetKDramaStatusDocument = gql`\n    mutation SetKDramaStatus($id: ObjectId!, $status: String!) {\n  kDrama: updateOneKDrama(query: {_id: $id}, set: {status: $status}) {\n    _id\n    title\n    image\n    status\n    totalEpisodes\n    currentEpisode\n    rating\n  }\n}\n    `;\nexport type SetKDramaStatusMutationFn = ApolloReactCommon.MutationFunction<Types.SetKDramaStatusMutation, Types.SetKDramaStatusMutationVariables>;\n\n/**\n * __useSetKDramaStatusMutation__\n *\n * To run a mutation, you first call `useSetKDramaStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetKDramaStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setKDramaStatusMutation, { data, loading, error }] = useSetKDramaStatusMutation({\n *   variables: {\n *      id: // value for 'id'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useSetKDramaStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.SetKDramaStatusMutation, Types.SetKDramaStatusMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.SetKDramaStatusMutation, Types.SetKDramaStatusMutationVariables>(SetKDramaStatusDocument, baseOptions);\n      }\nexport type SetKDramaStatusMutationHookResult = ReturnType<typeof useSetKDramaStatusMutation>;\nexport type SetKDramaStatusMutationResult = ApolloReactCommon.MutationResult<Types.SetKDramaStatusMutation>;\nexport type SetKDramaStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.SetKDramaStatusMutation, Types.SetKDramaStatusMutationVariables>;\nexport const StartKDramaDocument = gql`\n    mutation StartKDrama($id: ObjectId!) {\n  kDrama: updateOneKDrama(query: {_id: $id}, set: {status: \"watching\", currentEpisode: 1}) {\n    _id\n    title\n    image\n    status\n    totalEpisodes\n    currentEpisode\n    rating\n  }\n}\n    `;\nexport type StartKDramaMutationFn = ApolloReactCommon.MutationFunction<Types.StartKDramaMutation, Types.StartKDramaMutationVariables>;\n\n/**\n * __useStartKDramaMutation__\n *\n * To run a mutation, you first call `useStartKDramaMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useStartKDramaMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [startKDramaMutation, { data, loading, error }] = useStartKDramaMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useStartKDramaMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.StartKDramaMutation, Types.StartKDramaMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.StartKDramaMutation, Types.StartKDramaMutationVariables>(StartKDramaDocument, baseOptions);\n      }\nexport type StartKDramaMutationHookResult = ReturnType<typeof useStartKDramaMutation>;\nexport type StartKDramaMutationResult = ApolloReactCommon.MutationResult<Types.StartKDramaMutation>;\nexport type StartKDramaMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.StartKDramaMutation, Types.StartKDramaMutationVariables>;\nexport const SetEpisodesDocument = gql`\n    mutation SetEpisodes($id: ObjectId!, $counter: Float!) {\n  kDrama: updateOneKDrama(query: {_id: $id}, set: {currentEpisode: $counter}) {\n    _id\n    title\n    image\n    status\n    totalEpisodes\n    currentEpisode\n    rating\n  }\n}\n    `;\nexport type SetEpisodesMutationFn = ApolloReactCommon.MutationFunction<Types.SetEpisodesMutation, Types.SetEpisodesMutationVariables>;\n\n/**\n * __useSetEpisodesMutation__\n *\n * To run a mutation, you first call `useSetEpisodesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetEpisodesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setEpisodesMutation, { data, loading, error }] = useSetEpisodesMutation({\n *   variables: {\n *      id: // value for 'id'\n *      counter: // value for 'counter'\n *   },\n * });\n */\nexport function useSetEpisodesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.SetEpisodesMutation, Types.SetEpisodesMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.SetEpisodesMutation, Types.SetEpisodesMutationVariables>(SetEpisodesDocument, baseOptions);\n      }\nexport type SetEpisodesMutationHookResult = ReturnType<typeof useSetEpisodesMutation>;\nexport type SetEpisodesMutationResult = ApolloReactCommon.MutationResult<Types.SetEpisodesMutation>;\nexport type SetEpisodesMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.SetEpisodesMutation, Types.SetEpisodesMutationVariables>;\nexport const SetRatingDocument = gql`\n    mutation SetRating($id: ObjectId!, $rating: Float!) {\n  kDrama: updateOneKDrama(query: {_id: $id}, set: {rating: $rating}) {\n    _id\n    title\n    image\n    status\n    totalEpisodes\n    currentEpisode\n    rating\n  }\n}\n    `;\nexport type SetRatingMutationFn = ApolloReactCommon.MutationFunction<Types.SetRatingMutation, Types.SetRatingMutationVariables>;\n\n/**\n * __useSetRatingMutation__\n *\n * To run a mutation, you first call `useSetRatingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetRatingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setRatingMutation, { data, loading, error }] = useSetRatingMutation({\n *   variables: {\n *      id: // value for 'id'\n *      rating: // value for 'rating'\n *   },\n * });\n */\nexport function useSetRatingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.SetRatingMutation, Types.SetRatingMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.SetRatingMutation, Types.SetRatingMutationVariables>(SetRatingDocument, baseOptions);\n      }\nexport type SetRatingMutationHookResult = ReturnType<typeof useSetRatingMutation>;\nexport type SetRatingMutationResult = ApolloReactCommon.MutationResult<Types.SetRatingMutation>;\nexport type SetRatingMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.SetRatingMutation, Types.SetRatingMutationVariables>;","export const STATUSES = {\n\tWATCHING: \"watching\",\n\tCOMPLETED: \"completed\",\n\tPLANNED: \"planned\",\n};\n\nexport const ACTIONS_TEXT: { [key: string]: string } = {\n\twatching: \"Complete\",\n\tcompleted: \"Completed\",\n\tplanned: \"Start Watching\",\n};\n\nexport const STATUS_TEXT: { [key: string]: string } = {\n\twatching: \"Currently watching\",\n\tcompleted: \"Completed\",\n\tplanned: \"Next planned\"\n}\n","import React, { useState } from \"react\";\nimport {\n\tAvatar,\n\tGrid,\n\tTooltip,\n\twithStyles,\n\tFab,\n\tstyled,\n} from \"@material-ui/core\";\nimport QuestionMarkIcon from \"@material-ui/icons/Help\";\nimport ArrowLeftIcon from \"@material-ui/icons/ArrowLeft\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\n\nimport { KDrama } from \"../types\";\n\ninterface Props {\n\tlist: KDrama[];\n\tsetDisplayedKDrama: (kDrama: KDrama) => void;\n\tisLoading: boolean;\n}\n\nconst TitleTooltip = withStyles(() => ({\n\ttooltip: {\n\t\tfontSize: 20,\n\t},\n}))(Tooltip);\n\nconst BigAvatar = styled(Avatar)({\n\theight: 150,\n\twidth: 150,\n});\n\nconst StyledInnerGrid = styled(Grid)({\n\tmarginTop: 30,\n\tmarginBottom: 20,\n\twidth: 900,\n});\n\nconst StyledOuterGrid = styled(Grid)({\n\twidth: 1100,\n});\n\nconst DramaList: React.FC<Props> = ({ list, setDisplayedKDrama }) => {\n\tconst [currentPage, setCurrentPage] = useState<number>(0);\n\n\tconst displayedNumber = 4;\n\tconst displayedDramas = list.slice(\n\t\tcurrentPage * displayedNumber,\n\t\t(currentPage + 1) * displayedNumber\n\t);\n\n\tconst handleClick = (kDrama: KDrama) => {\n\t\tsetDisplayedKDrama(kDrama);\n\t};\n\n\tconst handlePreviousPage = () => {\n\t\tconst previousPage = currentPage - 1;\n\t\tif (previousPage < 0) return;\n\t\tsetCurrentPage(previousPage);\n\t};\n\n\tconst handleNextPage = () => {\n\t\tconst nextPage = currentPage + 1;\n\t\tif (nextPage * displayedNumber > list.length) return;\n\t\tsetCurrentPage(nextPage);\n\t};\n\n\treturn (\n\t\t<StyledOuterGrid\n\t\t\tcontainer\n\t\t\tdirection=\"row\"\n\t\t\tjustify=\"space-between\"\n\t\t\talignItems=\"center\"\n\t\t>\n\t\t\t<Fab color=\"primary\" onClick={handlePreviousPage}>\n\t\t\t\t<ArrowLeftIcon fontSize=\"large\" />\n\t\t\t</Fab>\n\t\t\t<StyledInnerGrid container direction=\"row\" justify=\"space-evenly\">\n\t\t\t\t{displayedDramas.map((kDrama) => (\n\t\t\t\t\t<TitleTooltip key={kDrama._id} title={kDrama.title}>\n\t\t\t\t\t\t{kDrama.image ? (\n\t\t\t\t\t\t\t<BigAvatar\n\t\t\t\t\t\t\t\tonClick={() => handleClick(kDrama)}\n\t\t\t\t\t\t\t\tsrc={kDrama.image}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<BigAvatar>\n\t\t\t\t\t\t\t\t<QuestionMarkIcon style={{ fontSize: \"150px\" }} />\n\t\t\t\t\t\t\t</BigAvatar>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TitleTooltip>\n\t\t\t\t))}\n\t\t\t</StyledInnerGrid>\n\n\t\t\t<Fab color=\"primary\" onClick={handleNextPage}>\n\t\t\t\t<ArrowRightIcon fontSize=\"large\" />\n\t\t\t</Fab>\n\t\t</StyledOuterGrid>\n\t);\n};\n\nexport default DramaList;\n","import React from \"react\";\nimport {\n\tCard,\n\tCardContent,\n\tCardActions,\n\tButton,\n\tTypography,\n\tstyled,\n} from \"@material-ui/core\";\n\nimport { KDrama } from \"../types\";\nimport { STATUSES, ACTIONS_TEXT, STATUS_TEXT } from \"../Constants\";\n\nconst StyledCard = styled(Card)({\n\twidth: 800,\n\tmarginTop: 50,\n});\n\nconst CardImage = styled(\"img\")({\n\theight: 450,\n\twidth: 800,\n\tobjectFit: \"cover\",\n});\n\nconst PaddedCardActions = styled(CardActions)({\n\tjustifyContent: \"flex-end\",\n\tpadding: \"8px 15px 15px 15px\",\n});\n\ninterface Props {\n\tkDrama: KDrama;\n\tsetEpisodes: (id: string, current: number) => void;\n\tsetStatus: (id: string, status: string) => void;\n}\n\nconst MainCard: React.FC<Props> = ({ kDrama, setEpisodes, setStatus }) => {\n\tconst handleStart = () => {\n\t\tsetStatus(kDrama._id, STATUSES.WATCHING);\n\t\tsetEpisodes(kDrama._id, 1);\n\t};\n\n\tconst handleComplete = () => {\n\t\tsetStatus(kDrama._id, STATUSES.COMPLETED);\n\t\tsetEpisodes(kDrama._id, kDrama.totalEpisodes);\n\t};\n\n\tconst ACTIONS: { [key: string]: () => void } = {\n\t\twatching: handleComplete,\n\t\tcompleted: () => {},\n\t\tplanned: handleStart,\n\t};\n\n\treturn (\n\t\t<StyledCard elevation={5}>\n\t\t\t<CardContent style={{ padding: \"0px\" }}>\n\t\t\t\t{kDrama?.image && <CardImage src={kDrama.image} alt=\"kdrama\" />}\n\t\t\t\t<Typography style={{ paddingLeft: \"15px\" }} variant=\"h4\">\n\t\t\t\t\t{STATUS_TEXT[kDrama.status]}\n\t\t\t\t</Typography>\n\t\t\t\t<Typography\n\t\t\t\t\tstyle={{ paddingLeft: \"15px\", fontWeight: \"bold\" }}\n\t\t\t\t\tvariant=\"h3\"\n\t\t\t\t>\n\t\t\t\t\t{kDrama.title ?? \"No currently watched KDrama\"}\n\t\t\t\t</Typography>\n\t\t\t\t<PaddedCardActions>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tonClick={() => ACTIONS[kDrama.status]()}\n\t\t\t\t\t>\n\t\t\t\t\t\t{ACTIONS_TEXT[kDrama.status]}\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\tsetEpisodes(kDrama._id, (kDrama.currentEpisode || 0) + 1)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{`${kDrama.currentEpisode ?? \"0\"}/${kDrama.totalEpisodes}`}\n\t\t\t\t\t</Button>\n\t\t\t\t</PaddedCardActions>\n\t\t\t</CardContent>\n\t\t</StyledCard>\n\t);\n};\n\nexport default MainCard;\n","import React, { useState } from \"react\";\nimport { Fab, ButtonGroup, Button, styled } from \"@material-ui/core\";\nimport { green } from \"@material-ui/core/colors\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport AddIcon from \"@material-ui/icons/AddCircle\";\nimport FilterIcon from \"@material-ui/icons/FilterList\";\n\nimport { STATUSES } from \"../Constants\";\n\nconst FilterGroupFab = styled(Fab)({\n\tposition: \"fixed\",\n\tright: \"80px\",\n\tbottom: \"240px\",\n\tbackgroundColor: green[700],\n\tcolor: \"white\",\n});\n\nconst FilterButtonGroup = styled(ButtonGroup)({\n\tposition: \"fixed\",\n\tright: \"160px\",\n\tbottom: \"200px\",\n});\n\nconst FilterButton = styled(Button)({ color: green[700], borderColor: green[700] });\n\ninterface Props {\n\tlogOut: () => Promise<void>;\n\thandleOpen: () => void;\n\tsetFilter: (status: string | null) => void;\n}\n\nconst FabGroup: React.FC<Props> = ({ logOut, handleOpen, setFilter }) => {\n\tconst [showFilterList, setShowFilterList] = useState<boolean>(false);\n\n\tconst handleClick = (status: string | null) => {\n\t\tsetFilter(status);\n\t\tsetShowFilterList(false);\n\t};\n\n\tconst toggleFilterList = () => {\n\t\tsetShowFilterList(!showFilterList);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<FilterGroupFab onClick={toggleFilterList}>\n\t\t\t\t<FilterIcon />\n\t\t\t</FilterGroupFab>\n\t\t\t{showFilterList && (\n\t\t\t\t<FilterButtonGroup variant=\"outlined\" orientation=\"vertical\">\n\t\t\t\t\t<FilterButton onClick={() => handleClick(STATUSES.PLANNED)}>\n\t\t\t\t\t\tPlanned\n\t\t\t\t\t</FilterButton>\n\t\t\t\t\t<FilterButton onClick={() => handleClick(STATUSES.WATCHING)}>\n\t\t\t\t\t\tWatching\n\t\t\t\t\t</FilterButton>\n\t\t\t\t\t<FilterButton onClick={() => handleClick(STATUSES.COMPLETED)}>\n\t\t\t\t\t\tCompleted\n\t\t\t\t\t</FilterButton>\n\t\t\t\t\t<FilterButton onClick={() => handleClick(null)}>All</FilterButton>\n\t\t\t\t</FilterButtonGroup>\n\t\t\t)}\n\t\t\t<Fab\n\t\t\t\tstyle={{ position: \"fixed\", right: \"80px\", bottom: \"160px\" }}\n\t\t\t\tcolor=\"secondary\"\n\t\t\t\tonClick={handleOpen}\n\t\t\t>\n\t\t\t\t<AddIcon />\n\t\t\t</Fab>\n\t\t\t<Fab\n\t\t\t\tstyle={{ position: \"fixed\", right: \"80px\", bottom: \"80px\" }}\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tonClick={() => logOut()}\n\t\t\t>\n\t\t\t\t<ExitToAppIcon />\n\t\t\t</Fab>\n\t\t</>\n\t);\n};\n\nexport default FabGroup;\n","import React, { useState } from \"react\";\n\nimport {\n\tDialog,\n\tDialogTitle,\n\tDialogContent,\n\tDialogContentText,\n\tTextField,\n\tSelect,\n\tMenuItem,\n\tButton,\n\tstyled,\n} from \"@material-ui/core\";\n\nimport { STATUSES } from \"../Constants\";\nimport { KDramaInsertInput } from \"../types\";\n\nconst SubmitButton = styled(Button)({\n\tdisplay: \"flex\",\n\talignSelf: \"flex-end\",\n\twidth: \"30%\",\n\tmarginTop: 20,\n});\n\ninterface Props {\n\tisOpen: boolean;\n\thandleClose: () => void;\n\taddKDrama: (data: KDramaInsertInput) => void;\n}\n\nconst AddKDramaForm: React.FC<Props> = ({ isOpen, handleClose, addKDrama }) => {\n\tconst [status, setStatus] = useState<string>(STATUSES.PLANNED);\n\tconst [title, setTitle] = useState<string>(\"\");\n\tconst [image, setImage] = useState<string>(\"\");\n\tconst [totalEpisodes, setTotalEpisodes] = useState<number>(0);\n\n\tconst inputData: KDramaInsertInput = {\n\t\ttitle,\n\t\timage,\n\t\tstatus,\n\t\ttotalEpisodes,\n\t};\n\n\tconst handleSubmit = () => {\n\t\taddKDrama(inputData);\n\t\thandleClose();\n\t\tsetStatus(STATUSES.PLANNED);\n\t\tsetTitle(\"\");\n\t\tsetImage(\"\");\n\t\tsetTotalEpisodes(0);\n\t};\n\n\treturn (\n\t\t<Dialog fullWidth open={isOpen} onClose={handleClose}>\n\t\t\t<DialogTitle>Add KDrama</DialogTitle>\n\t\t\t<DialogContent style={{ display: \"flex\", flexDirection: \"column\" }}>\n\t\t\t\t<DialogContentText>\n\t\t\t\t\tEnter the new KDrama's information\n\t\t\t\t</DialogContentText>\n\t\t\t\t<TextField\n\t\t\t\t\tvalue={title}\n\t\t\t\t\tonChange={(e) => setTitle(e.target.value)}\n\t\t\t\t\trequired\n\t\t\t\t\tautoFocus\n\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\tlabel=\"Title\"\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tvalue={image}\n\t\t\t\t\tonChange={(e) => setImage(e.target.value)}\n\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\tlabel=\"Image Link\"\n\t\t\t\t/>\n\t\t\t\t<Select\n\t\t\t\t\tonChange={(e) => setStatus(e.target.value as string)}\n\t\t\t\t\tvalue={status}\n\t\t\t\t\trequired\n\t\t\t\t\tstyle={{ margin: \"21px 0px 4px 0px\" }}\n\t\t\t\t>\n\t\t\t\t\t<MenuItem value={STATUSES.WATCHING}>Watching</MenuItem>\n\t\t\t\t\t<MenuItem value={STATUSES.COMPLETED}>Completed</MenuItem>\n\t\t\t\t\t<MenuItem value={STATUSES.PLANNED}>Planned</MenuItem>\n\t\t\t\t</Select>\n\t\t\t\t<TextField\n\t\t\t\t\tvalue={totalEpisodes}\n\t\t\t\t\tonChange={(e) => setTotalEpisodes(parseInt(e.target.value))}\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\tlabel=\"Total Episodes\"\n\t\t\t\t/>\n\t\t\t\t<SubmitButton\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t>\n\t\t\t\t\tAdd\n\t\t\t\t</SubmitButton>\n\t\t\t</DialogContent>\n\t\t</Dialog>\n\t);\n};\n\nexport default AddKDramaForm;\n","import React, { useState, useMemo, useCallback } from \"react\";\nimport { Typography, CircularProgress, Grid, styled } from \"@material-ui/core\";\n\nimport { useRealmApp } from \"../realm/RealmApp\";\nimport {\n\tuseGetAllKDramasQuery,\n\tuseAddKDramaMutation,\n\tuseSetKDramaStatusMutation,\n\tuseSetEpisodesMutation,\n} from \"../graphql-operations\";\nimport { GetAllKDramasQuery, KDrama, KDramaInsertInput } from \"../types\";\nimport { STATUSES } from \"../Constants\";\nimport KDramaList from \"./DramaList\";\nimport MainCard from \"./MainCard\";\nimport FabGroup from \"./FabGroup\";\nimport AddKDramaForm from \"./AddKDramaForm\";\n\nconst StyledBackgroundGrid = styled(Grid)({\n\tbackground:\n\t\t\"linear-gradient(130deg, rgba(174,229,238,1) 0%, rgba(75,160,255,1) 100%)\",\n\theight: \"100vh\",\n\tborderRadius: \"0% 0% 80% 0%\",\n});\n\nconst Board: React.FC = () => {\n\tconst [kDramas, setKDramas] = useState<KDrama[]>([]);\n\tconst watchedKDrama = kDramas.find(\n\t\t({ status }) => status === STATUSES.WATCHING || status === STATUSES.PLANNED\n\t);\n\tconst [displayedKDrama, setDisplayedKDrama] = useState<KDrama | undefined>();\n\tconst [isOpen, setIsOpen] = useState<boolean>(false);\n\tconst [statusFilter, setStatusFilter] = useState<string | null>(null);\n\tconst filteredKDramas = useMemo(\n\t\t() =>\n\t\t\tkDramas.filter(({ status }) =>\n\t\t\t\tstatusFilter ? status === statusFilter : true\n\t\t\t),\n\t\t[statusFilter, kDramas]\n\t);\n\n\tconst { logOut } = useRealmApp();\n\tconst [addKDramaMutation] = useAddKDramaMutation();\n\tconst [setKDramaStatusMutation] = useSetKDramaStatusMutation();\n\tconst [setEpisodesMutation] = useSetEpisodesMutation();\n\tconst { loading } = useGetAllKDramasQuery({\n\t\tonCompleted: (data: GetAllKDramasQuery) => {\n\t\t\tif (data?.kDramas) {\n\t\t\t\tsetKDramas(data.kDramas as KDrama[]);\n\t\t\t}\n\t\t},\n\t});\n\n\tconst handleSubmit = async (data: KDramaInsertInput) => {\n\t\tconst currentKDramas = [...kDramas];\n\t\ttry {\n\t\t\tconst result = await addKDramaMutation({ variables: { kDrama: data } });\n\t\t\tconst newKDrama = result.data?.kDrama as KDrama;\n\t\t\tsetKDramas([...currentKDramas, newKDrama]);\n\t\t} catch (err) {\n\t\t\tsetKDramas(currentKDramas);\n\t\t\tthrow new Error(\"Couldn't add new KDrama\");\n\t\t}\n\t};\n\n\tconst setEpisodes = useCallback(\n\t\tasync (id: string, current: number) => {\n\t\t\tconst currentKDramas = [...kDramas];\n\t\t\ttry {\n\t\t\t\tconst result = await setEpisodesMutation({\n\t\t\t\t\tvariables: { id, counter: current },\n\t\t\t\t});\n\t\t\t\tconst updatedKDrama = result.data?.kDrama as KDrama;\n\t\t\t\tcurrentKDramas[\n\t\t\t\t\tcurrentKDramas.findIndex(({ _id }) => _id === updatedKDrama._id)\n\t\t\t\t] = updatedKDrama;\n\t\t\t\tsetKDramas(currentKDramas);\n\t\t\t} catch (err) {\n\t\t\t\tsetKDramas(currentKDramas);\n\t\t\t\tthrow new Error(\"Couldn't increase episodes\");\n\t\t\t}\n\t\t},\n\t\t[kDramas, setEpisodesMutation]\n\t);\n\n\tconst setStatus = useCallback(\n\t\tasync (id: string, status: string) => {\n\t\t\tconst currentKDramas = [...kDramas];\n\t\t\ttry {\n\t\t\t\tconst result = await setKDramaStatusMutation({\n\t\t\t\t\tvariables: { id, status },\n\t\t\t\t});\n\t\t\t\tconst updatedKDrama = result.data?.kDrama as KDrama;\n\t\t\t\tcurrentKDramas[\n\t\t\t\t\tcurrentKDramas.findIndex(({ _id }) => _id === updatedKDrama._id)\n\t\t\t\t] = updatedKDrama;\n\t\t\t\tsetKDramas(currentKDramas);\n\t\t\t} catch (err) {\n\t\t\t\tsetKDramas(currentKDramas);\n\t\t\t\tthrow new Error(\"Couldn't set status\");\n\t\t\t}\n\t\t},\n\t\t[kDramas, setKDramaStatusMutation]\n\t);\n\n\tconst renderCard = useCallback(() => {\n\t\tif (loading) return <CircularProgress size={200} />;\n\n\t\tif (!(watchedKDrama || displayedKDrama))\n\t\t\treturn <Typography variant=\"h2\">No KDrama in Queue</Typography>;\n\n\t\treturn (\n\t\t\t<MainCard\n\t\t\t\tkDrama={displayedKDrama || watchedKDrama!}\n\t\t\t\tsetStatus={setStatus}\n\t\t\t\tsetEpisodes={setEpisodes}\n\t\t\t/>\n\t\t);\n\t}, [loading, watchedKDrama, displayedKDrama, setStatus, setEpisodes]);\n\n\treturn (\n\t\t<StyledBackgroundGrid\n\t\t\tcontainer\n\t\t\tdirection=\"column\"\n\t\t\talignItems=\"center\"\n\t\t\tjustify=\"space-evenly\"\n\t\t>\n\t\t\t{renderCard()}\n\t\t\t<KDramaList\n\t\t\t\tsetDisplayedKDrama={setDisplayedKDrama}\n\t\t\t\tlist={filteredKDramas}\n\t\t\t\tisLoading={loading}\n\t\t\t/>\n\t\t\t<FabGroup\n\t\t\t\tsetFilter={setStatusFilter}\n\t\t\t\thandleOpen={() => setIsOpen(true)}\n\t\t\t\tlogOut={logOut}\n\t\t\t/>\n\t\t\t<AddKDramaForm\n\t\t\t\taddKDrama={handleSubmit}\n\t\t\t\thandleClose={() => setIsOpen(false)}\n\t\t\t\tisOpen={isOpen}\n\t\t\t/>\n\t\t</StyledBackgroundGrid>\n\t);\n};\n\nexport default Board;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport { cyan, blue, green } from \"@material-ui/core/colors\";\n\ndeclare module \"@material-ui/core/styles/createPalette\" {\n\tinterface Palette {\n\t\tneutral: PaletteColor;\n\t}\n\tinterface PaletteOptions {\n\t\tneutral: PaletteColorOptions;\n\t}\n}\n\nconst theme = createMuiTheme({\n\tpalette: {\n\t\tneutral: {\n\t\t\tmain: green[700],\n\t\t},\n\t\tprimary: {\n\t\t\tmain: blue[700],\n\t\t},\n\t\tsecondary: {\n\t\t\tmain: cyan[700],\n\t\t},\n\t},\n});\n\nexport default theme;\n","import React from \"react\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\n\nimport RealmApp, { useRealmApp } from \"./realm/RealmApp\";\nimport RealmApolloProvider from \"./realm/RealmApolloProvider\";\nimport LoginScreen from \"./components/LoginScreen\";\nimport Board from \"./components/Board\";\nimport theme from \"./theme\";\n\nconst App: React.FC = (props) => {\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<RealmApp>\n\t\t\t\t<RequireAuthentication />\n\t\t\t</RealmApp>\n\t\t</ThemeProvider>\n\t);\n};\nexport default App;\n\nfunction RequireAuthentication() {\n\tconst app = useRealmApp();\n\tif (!app) {\n\t\treturn <div>Loading</div>;\n\t}\n\treturn app.user ? (\n\t\t<RealmApolloProvider>\n\t\t\t<Board />\n\t\t</RealmApolloProvider>\n\t) : (\n\t\t<LoginScreen />\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}