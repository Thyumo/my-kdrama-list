{"version":3,"sources":["realm/RealmApp.tsx","realm/RealmApolloProvider.tsx","components/LoginScreen.tsx","graphql-operations.ts","Constants.ts","components/DramaList.tsx","components/FabGroup.tsx","components/AddKDramaForm.tsx","components/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["app","Realm","id","RealmAppContext","React","undefined","RealmApp","children","appRef","currentUser","user","setUser","current","registerUser","email","password","a","emailPasswordAuth","context","logIn","credentials","emailPassword","logOut","Provider","value","useRealmApp","Error","RealmApolloProvider","createApolloClient","client","setClient","realmAppId","graphql_url","ApolloClient","link","HttpLink","uri","fetch","options","headers","refreshCustomData","authenticatedOptions","Authorization","accessToken","cache","InMemoryCache","LoginScreen","useState","setEmail","setPassword","error","setError","handleAuthenticationError","err","console","parts","message","split","reason","length","trimStart","status","reasonRegex","match","groups","parseAuthenticationError","prevErr","handleLogin","e","Container","Paper","elevation","style","paddingTop","paddingBottom","marginTop","display","flexDirection","alignItems","Typography","variant","TextField","margin","fullWidth","label","type","helperText","onChange","target","Button","color","onClick","GetAllKDramasDocument","gql","AddKDramaDocument","STATUSES","TitleTooltip","withStyles","tooltip","fontSize","Tooltip","BigAvatar","styled","Avatar","height","width","StyledGrid","Grid","marginBottom","DramaList","list","container","direction","justify","map","kDrama","key","_id","title","image","src","FabGroup","handleOpen","Fab","position","right","bottom","AddKDramaForm","isOpen","handleClose","addKDrama","setStatus","setTitle","setImage","inputData","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","required","autoFocus","Select","MenuItem","alignSelf","Board","baseOptions","kDramas","setKDramas","setIsOpen","ApolloReactHooks","addKDramaMutation","loading","useGetAllKDramasQuery","onCompleted","data","handleSubmit","currentKDramas","variables","result","newKDrama","Card","CircularProgress","currentKDrama","find","CardContent","padding","alt","paddingLeft","renderCardContent","filter","slice","isLoading","App","props","RequireAuthentication","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6075bc85.chunk.js","sourcesContent":["import * as React from \"react\";\nimport * as Realm from \"realm-web\";\n\nconst REALM_APP_ID = \"mykdramalist-svqcx\"\nconst app = new Realm.App({ id: REALM_APP_ID });\n\nconst RealmAppContext = React.createContext<IRealmApp | void>(undefined);\n\ninterface IRealmApp {\n  id: string;\n  user: Realm.User | null;\n  logIn: (email: string, password: string) => Promise<void>;\n  logOut: () => Promise<void>;\n  registerUser(email: string, password: string): Promise<void>;\n}\n\nconst RealmApp: React.FC = ({ children }) => {\n  // Keep track of the current user in local state\n  const appRef = React.useRef(app);\n  const [user, setUser] = React.useState(app.currentUser);\n  React.useEffect(() => {\n    setUser(app.currentUser);\n  }, [appRef.current.currentUser]);\n  \n  // Let new users register an account\n  const registerUser = async (email: string, password: string) => {\n    return await app.emailPasswordAuth.registerUser(email, password);\n  }\n  \n  // Let registered users log in\n  const logIn = async (email: string, password: string) => {\n    const credentials = Realm.Credentials.emailPassword(email, password);\n    await app.logIn(credentials);\n    setUser(app.currentUser);\n  }\n  \n  // Let logged in users log out\n  const logOut = async () => {\n    await app.currentUser?.logOut();\n    setUser(app.currentUser);\n  }\n  \n  // Provide the current user and authentication methods to the wrapped tree\n  const context: IRealmApp = {\n    id: REALM_APP_ID,\n    user,\n    logIn,\n    logOut,\n    registerUser,\n  };\n  return (\n    <RealmAppContext.Provider value={context}>\n      {children}\n    </RealmAppContext.Provider>\n  );\n};\nexport default RealmApp;\n\nexport const useRealmApp = (): IRealmApp => {\n  const app = React.useContext(RealmAppContext);\n  if (!app) {\n    throw new Error(\"You must call useRealmApp() inside of a <RealmApp />.\");\n  }\n  return app;\n};","import * as React from \"react\";\nimport * as Realm from \"realm-web\";\nimport { useRealmApp } from \"./RealmApp\";\n\n// Apollo\nimport {\n  ApolloProvider,\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport { NormalizedCacheObject } from \"@apollo/client/cache\";\n\nconst RealmApolloProvider: React.FC = ({ children }) => {\n  const { id, user } = useRealmApp();\n  const [client, setClient] = React.useState(\n    createApolloClient(id, user as Realm.User)\n  );\n  React.useEffect(() => {\n    setClient(createApolloClient(id, user as Realm.User));\n  }, [id, user]);\n\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\nexport default RealmApolloProvider;\n\n// TODO: Implement createApolloClient()\nfunction createApolloClient(\n  realmAppId: string,\n  user: Realm.User\n): ApolloClient<NormalizedCacheObject> {\n  const graphql_url = `https://realm.mongodb.com/api/client/v2.0/app/${realmAppId}/graphql`;\n  \n  const client = new ApolloClient({\n    link: new HttpLink({\n      uri: graphql_url,\n      fetch: async (uri: RequestInfo, options: RequestInit) => {\n        if (!options.headers) {\n          options.headers = {} as Record<string, string>;\n        }\n        // Refreshing custom data also ensures a valid access token\n        await user.refreshCustomData();\n        const authenticatedOptions: RequestInit = {\n          ...options,\n          headers: {\n            ...options.headers,\n            Authorization: `Bearer ${user.accessToken}`\n          }\n        }\n        return fetch(uri, authenticatedOptions);\n      },\n    }),\n    cache: new InMemoryCache(),\n  });\n\n  return client\n}","import React, { useState } from \"react\";\nimport {\n\tContainer,\n\tTextField,\n\tButton,\n\tPaper,\n\tTypography,\n} from \"@material-ui/core\";\n\nimport { useRealmApp } from \"../realm/RealmApp\";\n\nconst LoginScreen: React.FC = () => {\n\tconst app = useRealmApp();\n\n\t// Keep track of form input state\n\tconst [email, setEmail] = useState<string>(\"\");\n\tconst [password, setPassword] = useState<string>(\"\");\n\n\t// Keep track of input validation/errors\n\tconst [error, setError] = React.useState<{\n\t\temail?: string;\n\t\tpassword?: string;\n\t}>({});\n\n\tfunction parseAuthenticationError(err: Error) {\n\t\tconst parts = err.message.split(\":\");\n\t\tconst reason = parts[parts.length - 1].trimStart();\n\t\tif (!reason) return { status: \"\", message: \"\" };\n\t\tconst reasonRegex = /(?<message>.+)\\s\\(status (?<status>[0-9][0-9][0-9])/;\n\t\tconst match = reason.match(reasonRegex);\n\t\tconst { status, message } = match?.groups ?? {};\n\t\treturn { status, message };\n\t}\n\n\tfunction handleAuthenticationError(err: Error) {\n\t\tconsole.error(err);\n\t\tconst { status, message } = parseAuthenticationError(err);\n\t\tconst errorType = message || status;\n\t\tswitch (errorType) {\n\t\t\tcase \"invalid username\":\n\t\t\t\tsetError((prevErr) => ({\n\t\t\t\t\t...prevErr,\n\t\t\t\t\temail: \"Invalid email address.\",\n\t\t\t\t}));\n\t\t\t\tbreak;\n\t\t\tcase \"invalid username/password\":\n\t\t\tcase \"invalid password\":\n\t\t\tcase \"401\":\n\t\t\t\tsetError((err) => ({ ...err, password: \"Incorrect password.\" }));\n\t\t\t\tbreak;\n\t\t\tcase \"name already in use\":\n\t\t\tcase \"409\":\n\t\t\t\tsetError((err) => ({ ...err, email: \"Email is already registered.\" }));\n\t\t\t\tbreak;\n\t\t\tcase \"password must be between 6 and 128 characters\":\n\t\t\tcase \"400\":\n\t\t\t\tsetError((err) => ({\n\t\t\t\t\t...err,\n\t\t\t\t\tpassword: \"Password must be between 6 and 128 characters.\",\n\t\t\t\t}));\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tconst handleLogin = async () => {\n\t\tsetError((e) => ({ ...e, password: undefined }));\n\t\ttry {\n\t\t\treturn await app.logIn(email, password);\n\t\t} catch (err) {\n\t\t\thandleAuthenticationError(err);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<Paper\n\t\t\t\televation={4}\n\t\t\t\tstyle={{\n\t\t\t\t\tpaddingTop: \"100px\",\n\t\t\t\t\tpaddingBottom: \"100px\",\n\t\t\t\t\tmarginTop: \"200px\",\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tflexDirection: \"column\",\n\t\t\t\t\talignItems: \"center\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Typography variant=\"h2\">Login Screen</Typography>\n\t\t\t\t<form>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tstyle={{ margin: \"8px\" }}\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tid=\"email\"\n\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\terror={!!error.email}\n\t\t\t\t\t\thelperText={error.email}\n\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tstyle={{ margin: \"8px\" }}\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\terror={!!error.password}\n\t\t\t\t\t\thelperText={error.password}\n\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tstyle={{ margin: \"8px\" }}\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tonClick={() => handleLogin()}\n\t\t\t\t\t>\n\t\t\t\t\t\tLog In\n\t\t\t\t\t</Button>\n\t\t\t\t</form>\n\t\t\t</Paper>\n\t\t</Container>\n\t);\n};\n\nexport default LoginScreen;\n","import * as Types from './types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/client';\n\nexport const GetAllKDramasDocument = gql`\n    query GetAllKDramas {\n  kDramas {\n    _id\n    title\n    image\n    status\n  }\n}\n    `;\n\n/**\n * __useGetAllKDramasQuery__\n *\n * To run a query within a React component, call `useGetAllKDramasQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllKDramasQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllKDramasQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllKDramasQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>) {\n        return ApolloReactHooks.useQuery<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>(GetAllKDramasDocument, baseOptions);\n      }\nexport function useGetAllKDramasLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>(GetAllKDramasDocument, baseOptions);\n        }\nexport type GetAllKDramasQueryHookResult = ReturnType<typeof useGetAllKDramasQuery>;\nexport type GetAllKDramasLazyQueryHookResult = ReturnType<typeof useGetAllKDramasLazyQuery>;\nexport type GetAllKDramasQueryResult = ApolloReactCommon.QueryResult<Types.GetAllKDramasQuery, Types.GetAllKDramasQueryVariables>;\nexport const AddKDramaDocument = gql`\n    mutation AddKDrama($kDrama: KDramaInsertInput!) {\n  kDrama: insertOneKDrama(data: $kDrama) {\n    _id\n    title\n    image\n    status\n  }\n}\n    `;\nexport type AddKDramaMutationFn = ApolloReactCommon.MutationFunction<Types.AddKDramaMutation, Types.AddKDramaMutationVariables>;\n\n/**\n * __useAddKDramaMutation__\n *\n * To run a mutation, you first call `useAddKDramaMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddKDramaMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addKDramaMutation, { data, loading, error }] = useAddKDramaMutation({\n *   variables: {\n *      kDrama: // value for 'kDrama'\n *   },\n * });\n */\nexport function useAddKDramaMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.AddKDramaMutation, Types.AddKDramaMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.AddKDramaMutation, Types.AddKDramaMutationVariables>(AddKDramaDocument, baseOptions);\n      }\nexport type AddKDramaMutationHookResult = ReturnType<typeof useAddKDramaMutation>;\nexport type AddKDramaMutationResult = ApolloReactCommon.MutationResult<Types.AddKDramaMutation>;\nexport type AddKDramaMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.AddKDramaMutation, Types.AddKDramaMutationVariables>;","export const STATUSES = {\n  WATCHING: \"watching\",\n  COMPLETED: \"completed\",\n  PLANNED: \"planned\"\n}\n","import React from \"react\";\nimport { Avatar, Grid, Tooltip, withStyles, styled } from \"@material-ui/core\";\nimport QuestionMarkIcon from \"@material-ui/icons/Help\";\n\nimport { KDrama } from \"../types\";\n\ninterface Props {\n\tlist: KDrama[];\n\tisLoading: boolean;\n}\n\nconst TitleTooltip = withStyles(() => ({\n\ttooltip: {\n\t\tfontSize: 20,\n\t},\n}))(Tooltip);\n\nconst BigAvatar = styled(Avatar)({\n\theight: 150,\n\twidth: 150,\n});\n\nconst StyledGrid = styled(Grid)({\n\tmarginTop: 30,\n\tmarginBottom: 20,\n\twidth: 800,\n});\n\nconst DramaList: React.FC<Props> = ({ list }) => {\n\treturn (\n\t\t<StyledGrid container direction=\"row\" justify=\"space-evenly\">\n\t\t\t{list.map((kDrama) => (\n\t\t\t\t<TitleTooltip key={kDrama._id} title={kDrama.title}>\n\t\t\t\t\t{kDrama.image ? (\n\t\t\t\t\t\t<BigAvatar src={kDrama.image} />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<BigAvatar>\n\t\t\t\t\t\t\t<QuestionMarkIcon style={{ fontSize: \"150px\" }} />\n\t\t\t\t\t\t</BigAvatar>\n\t\t\t\t\t)}\n\t\t\t\t</TitleTooltip>\n\t\t\t))}\n\t\t</StyledGrid>\n\t);\n};\n\nexport default DramaList;\n","import React from \"react\";\nimport { Fab } from \"@material-ui/core\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport AddIcon from \"@material-ui/icons/AddCircle\";\n\ninterface Props {\n\tlogOut: () => Promise<void>;\n\thandleOpen: () => void;\n}\n\nconst FabGroup: React.FC<Props> = ({ logOut, handleOpen }) => (\n\t<>\n\t\t<Fab\n\t\t\tstyle={{ position: \"fixed\", right: \"80px\", bottom: \"160px\" }}\n\t\t\tcolor=\"secondary\"\n\t\t>\n\t\t\t<AddIcon onClick={handleOpen} />\n\t\t</Fab>\n\t\t<Fab\n\t\t\tstyle={{ position: \"fixed\", right: \"80px\", bottom: \"80px\" }}\n\t\t\tcolor=\"primary\"\n\t\t\tonClick={() => logOut()}\n\t\t>\n\t\t\t<ExitToAppIcon />\n\t\t</Fab>\n\t</>\n);\n\nexport default FabGroup;\n","import React, { useState } from \"react\";\n\nimport {\n\tDialog,\n\tDialogTitle,\n\tDialogContent,\n\tDialogContentText,\n\tTextField,\n\tSelect,\n\tMenuItem,\n\tButton,\n} from \"@material-ui/core\";\n\nimport { STATUSES } from \"../Constants\";\nimport { KDramaInsertInput } from \"../types\";\n\ninterface Props {\n\tisOpen: boolean;\n\thandleClose: () => void;\n\taddKDrama: (data: KDramaInsertInput) => void;\n}\n\nconst AddKDramaForm: React.FC<Props> = ({ isOpen, handleClose, addKDrama }) => {\n\tconst [status, setStatus] = useState<string>(STATUSES.PLANNED);\n\tconst [title, setTitle] = useState<string>(\"\");\n\tconst [image, setImage] = useState<string>(\"\");\n\n\tconst inputData: KDramaInsertInput = {\n\t\ttitle,\n\t\timage,\n\t\tstatus,\n\t};\n\n\treturn (\n\t\t<Dialog fullWidth open={isOpen} onClose={handleClose}>\n\t\t\t<DialogTitle>Add KDrama</DialogTitle>\n\t\t\t<DialogContent style={{ display: \"flex\", flexDirection: \"column\" }}>\n\t\t\t\t<DialogContentText>\n\t\t\t\t\tEnter the new KDrama's information\n\t\t\t\t</DialogContentText>\n\t\t\t\t<TextField\n\t\t\t\t\tvalue={title}\n\t\t\t\t\tonChange={(e) => setTitle(e.target.value)}\n\t\t\t\t\trequired\n\t\t\t\t\tautoFocus\n\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\tlabel=\"Title\"\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tvalue={image}\n\t\t\t\t\tonChange={(e) => setImage(e.target.value)}\n\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\tlabel=\"Image Link\"\n\t\t\t\t/>\n\t\t\t\t<Select\n\t\t\t\t\tonChange={(e) => setStatus(e.target.value as string)}\n\t\t\t\t\tvalue={status}\n\t\t\t\t\trequired\n\t\t\t\t\tstyle={{ margin: \"21px 0px 4px 0px\" }}\n\t\t\t\t>\n\t\t\t\t\t<MenuItem value={STATUSES.WATCHING}>Watching</MenuItem>\n\t\t\t\t\t<MenuItem value={STATUSES.COMPLETED}>Completed</MenuItem>\n\t\t\t\t\t<MenuItem value={STATUSES.PLANNED}>Planned</MenuItem>\n\t\t\t\t</Select>\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\t\talignSelf: \"flex-end\",\n\t\t\t\t\t\twidth: \"30%\",\n\t\t\t\t\t\tmarginTop: 20,\n\t\t\t\t\t}}\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\taddKDrama(inputData);\n\t\t\t\t\t\thandleClose();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tAdd\n\t\t\t\t</Button>\n\t\t\t</DialogContent>\n\t\t</Dialog>\n\t);\n};\n\nexport default AddKDramaForm;\n","import React, { useState } from \"react\";\nimport {\n\tCard,\n\tCardContent,\n\tTypography,\n\tCircularProgress,\n\tGrid,\n} from \"@material-ui/core\";\n\nimport { useRealmApp } from \"../realm/RealmApp\";\nimport {\n\tuseGetAllKDramasQuery,\n\tuseAddKDramaMutation,\n} from \"../graphql-operations\";\nimport { GetAllKDramasQuery, KDrama, KDramaInsertInput } from \"../types\";\nimport { STATUSES } from \"../Constants\";\nimport KDramaList from \"./DramaList\";\nimport FabGroup from \"./FabGroup\";\nimport AddKDramaForm from \"./AddKDramaForm\";\n\nconst Board: React.FC = () => {\n\tconst [kDramas, setKDramas] = useState<KDrama[]>([]);\n\tconst [isOpen, setIsOpen] = useState<boolean>(false);\n\n\tconst { logOut } = useRealmApp();\n\tconst [addKDramaMutation] = useAddKDramaMutation();\n\tconst { loading } = useGetAllKDramasQuery({\n\t\tonCompleted: (data: GetAllKDramasQuery) => {\n\t\t\tif (data?.kDramas) {\n\t\t\t\tsetKDramas(data.kDramas as KDrama[]);\n\t\t\t}\n\t\t},\n\t});\n\n\tconst handleSubmit = async (data: KDramaInsertInput) => {\n\t\tconst currentKDramas = [...kDramas];\n\t\ttry {\n\t\t\tconst result = await addKDramaMutation({ variables: { kDrama: data } });\n\t\t\tconst newKDrama = result.data?.kDrama as KDrama;\n\t\t\tsetKDramas([...currentKDramas, newKDrama]);\n\t\t} catch (err) {\n\t\t\tsetKDramas(currentKDramas);\n\t\t\tthrow new Error(\"Couldn't add new KDrama\");\n\t\t}\n\t};\n\n\tconst renderCardContent = () => {\n\t\tif (loading) return <CircularProgress />;\n\n\t\tconst currentKDrama = kDramas.find(\n\t\t\t({ status }) => status === STATUSES.WATCHING\n\t\t);\n\n\t\treturn (\n\t\t\t<CardContent style={{ padding: \"0px\" }}>\n\t\t\t\t{currentKDrama?.image && (\n\t\t\t\t\t<img width=\"800px\" src={currentKDrama.image} alt=\"kdrama\" />\n\t\t\t\t)}\n\t\t\t\t<Typography style={{ paddingLeft: \"5px\" }} variant=\"h4\">\n\t\t\t\t\tCurrently watching:\n\t\t\t\t</Typography>\n\t\t\t\t<Typography style={{ paddingLeft: \"5px\" }} variant=\"h3\">\n\t\t\t\t\t{currentKDrama?.title ?? \"No currently watched KDrama\"}\n\t\t\t\t</Typography>\n\t\t\t</CardContent>\n\t\t);\n\t};\n\n\treturn (\n\t\t<Grid\n\t\t\tcontainer\n\t\t\tdirection=\"column\"\n\t\t\talignItems=\"center\"\n\t\t\tjustify=\"space-between\"\n\t\t>\n\t\t\t<Card\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: \"800px\",\n\t\t\t\t\tmarginTop: \"50px\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{renderCardContent()}\n\t\t\t</Card>\n\t\t\t<KDramaList\n\t\t\t\tlist={kDramas\n\t\t\t\t\t.filter(({ status }) => status !== STATUSES.WATCHING)\n\t\t\t\t\t.slice(0, 4)}\n\t\t\t\tisLoading={loading}\n\t\t\t/>\n\t\t\t<FabGroup handleOpen={() => setIsOpen(true)} logOut={logOut} />\n\t\t\t<AddKDramaForm addKDrama={handleSubmit} handleClose={() => setIsOpen(false)} isOpen={isOpen} />\n\t\t</Grid>\n\t);\n};\n\nexport default Board;\n","import React from \"react\";\nimport RealmApp, { useRealmApp } from \"./realm/RealmApp\";\nimport RealmApolloProvider from \"./realm/RealmApolloProvider\";\nimport LoginScreen from \"./components/LoginScreen\";\nimport Board from \"./components/Board\";\n\nconst App: React.FC = (props) => {\n  return (\n    <RealmApp>\n      <RequireAuthentication />\n    </RealmApp>\n  );\n};\nexport default App;\n\nfunction RequireAuthentication() {\n  const app = useRealmApp();\n  if (!app) {\n    return <div>Loading</div>;\n  }\n  return app.user ? (\n    <RealmApolloProvider>\n      <Board />\n    </RealmApolloProvider>\n  ) : (\n    <LoginScreen />\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}